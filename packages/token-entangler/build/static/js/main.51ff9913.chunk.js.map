{"version":3,"sources":["utils/entangler.ts","utils/accounts.ts","components/Settings/index.tsx","utils/borsh.ts","utils/transactions.ts","contexts/ConnectionContext.tsx","components/DefaultModal/index.tsx","contexts/WalletContext/WalletContext.tsx","contexts/WalletContext/wallet.less","contexts/ModalContext.tsx","contexts/ColorModeContext.tsx","utils/ids.ts","components/Header/Header.tsx","components/Show.tsx","components/Create.tsx","components/Swap.tsx","components/Search.tsx","components/Wizard.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["MetadataKey","TOKEN_ENTANGLER","ESCROW","Creator","args","address","verified","share","this","Data","name","symbol","uri","sellerFeeBasisPoints","creators","Metadata","key","updateAuthority","mint","data","primarySaleHappened","isMutable","editionNonce","imageUrl","masterEdition","edition","MetadataV1","METADATA_SCHEMA","Map","kind","fields","type","extendBorsh","METADATA_REPLACE","RegExp","decodeMetadata","buffer","metadata","deserializeUnchecked","replace","getTokenEntanglement","mintA","mintB","a","anchor","PublicKey","findProgramAddress","Buffer","from","toBuffer","TOKEN_ENTANGLEMENT_PROGRAM_ID","getEpKeyFromArgs","anchorProgram","entangledPair","console","log","epKey","provider","connection","getAccountInfo","getPriceWithMantissa","price","walletKeyPair","token","Token","TOKEN_PROGRAM_ID","getMintInfo","mintInfo","mantissa","decimals","Math","ceil","loadTokenEntanglementProgram","anchorWallet","preflightCommitment","fetchIdl","idl","getTokenEntanglementEscrows","getAtaForMint","buyer","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","showEntanglement","account","fetch","epObj","toBase58","treasuryMint","authority","tokenAEscrow","tokenBEscrow","toNumber","paid","paysEveryTime","bump","createEntanglement","priceNumber","parseFloat","authorityKey","publicKey","mintAKey","mintBKey","tMintKey","WRAPPED_SOL_MINT","reverseEntangledPair","reverseBump","tokenABump","tokenBBump","BN","priceAdjusted","ata","transferAuthority","Keypair","generate","signers","instruction","getMetadata","getEdition","SystemProgram","programId","SYSVAR_RENT_PUBKEY","payer","metadataA","editionA","metadataB","editionB","tokenB","tokenProgram","systemProgram","rent","accounts","createEntangledPair","instructions","createApproveInstruction","createRevokeInstruction","ContextConnection","sendTransactionWithRetry","createResult","chunks","array","size","Array","apply","length","map","_","index","slice","swapEntanglement","aAta","bAta","getTokenAmount","currABal","replacementToken","tokenMint","replacementTokenMint","result","paymentTransferAuthority","replacementTokenMetadata","isNative","equals","paymentAccount","push","remainingAccounts","metadataObj","metadataDecoded","i","pubkey","isWritable","isSigner","swap","ataProgram","ASSOCIATED_TOKEN_PROGRAM_ID","keys","filter","k","txnResult","epkey","searchEntanglements","searchMint","searchAuthority","getProgramAccounts","filters","memcmp","offset","bytes","toString","searchMintAAccounts","searchMintBAccounts","entanglementsAccounts","entanglements","Promise","all","allIndexesInSlice","getMultipleAccounts","e","entanglementData","decodedEntanglementData","coder","decode","concat","reducedEntanglements","en","mints","includes","metadataAKey","metadataBKey","metadatasA","metadatasB","decodedMetadata","j","json","JSON","text","decoded","parse","image","commitment","chunk","getMultipleAccountsCore","acc","rest","flat","_buildArgs","_rpcRequest","unsafeRes","error","Error","message","value","getOwnedNFTMints","getParsedTokenAccountsByOwner","TokenAccounts","NFTMints","val","parsed","info","tokenAmount","amount","TOKEN_METADATA_PROGRAM_ID","getTokenAccountBalance","uiAmount","pow","getBalance","shortenAddress","chars","notify","description","undefined","txid","placement","notification","style","color","opacity","backgroundColor","Settings","narrow","useWallet","disconnect","useConnectionConfig","setEndpoint","env","endpoint","setVisible","useWalletModal","open","React","useCallback","setModal","useModal","theme","useTheme","colorModeCtx","useColorMode","handleConnect","ModalEnum","WALLET","connectedActions","click","navigator","clipboard","writeText","innerNarrow","inner","Fragment","catch","expandedExtra","variant","useState","drawerOpen","setDrawerOpen","envCollapseOpen","setEnvCollapseOpen","hackySkipSet","toggleDrawer","event","target","classList","contains","drawerC","onClick","onClose","sx","width","role","onKeyDown","themeSwitch","ml","toggleColorMode","palette","mode","listHead","primary","primaryTypographyProps","fontSize","fontWeight","letterSpacing","className","in","timeout","unmountOnExit","component","disablePadding","ENDPOINTS","p","selected","pl","idx","direction","spacing","display","justifyContent","alignItems","marginRight","minWidth","id","onChange","underline","BinaryReader","prototype","readPubkey","readFixedArray","BinaryWriter","writePubkey","writeFixedArray","readPubkeyAsString","base58","encode","writePubkeyAsString","readMap32","reader","readU32","set","writeMap32","writer","forEach","writeU32","getUnixTs","Date","getTime","sleep","ms","resolve","setTimeout","explorerLinkFor","match","_rpcEndpoint","envFor","sendSignedTransaction","signedTransaction","rawTransaction","serialize","startTime","slot","sendRawTransaction","skipPreflight","debug","done","awaitTransactionSignatureConfirmation","confirmation","err","simulateResult","simulateTransaction","logs","line","startsWith","stringify","transaction","_recentBlockhash","_disableBlockhashCaching","recentBlockhash","signData","serializeMessage","wireTransaction","_serialize","encodedTransaction","encoding","res","queryStatus","status","confirmations","subId","reject","warn","onSignature","context","getSignatureStatuses","signatureStatuses","_signatureSubscriptions","removeSignatureListener","useLocalStorage","isBrowser","window","getItem","localStorage","setItem","removeItem","useLocalStorageState","defaultState","storedState","state","setState","setLocalStorageState","newState","ChainId","MainnetBeta","Devnet","DEFAULT","ConnectionContext","createContext","Connection","tokens","tokenMap","ConnectionProvider","children","useMemo","find","end","setTokens","setTokenMap","useEffect","TokenListProvider","then","container","list","excludeByTag","filterByChainId","getList","knownMints","reduce","item","onAccountChange","removeAccountChangeListener","onSlotChange","removeSlotChangeListener","Provider","useConnection","useContext","SequenceType","getErrorForTransaction","confirmTransaction","getParsedConfirmedTransaction","tx","errors","meta","logMessages","m","regex","exec","lastIndex","wallet","includesFeePayer","block","beforeSend","WalletNotConnectedError","Transaction","add","getRecentBlockhash","blockhash","setSigners","s","partialSign","signTransaction","DefaultModal","props","bodyStyle","background","borderRadius","flexDirection","footer","WalletModalContext","WalletModal","wallets","select","visible","setShowWallets","close","onCancel","height","textAlign","verticalAlign","lineHeight","marginBottom","icon","alt","src","float","WalletModalProvider","connected","setConnected","keyToDisplay","substring","WalletProvider","getPhantomWallet","getSolflareWallet","getTorusWallet","options","clientId","uxMode","getLedgerWallet","getSolongWallet","getMathWallet","getSolletWallet","onError","autoConnect","ModalContext","removeModal","ColorModeContext","ColorModeContextProvider","setMode","prevMode","CANDY_MACHINE_ID","Header","navs","href","Box","bgcolor","overflow","Button","Drawer","List","ListItem","ListItemText","Divider","nav","to","ListItemButton","Stack","marginLeft","flexGrow","Show","setMintA","setMintB","setEntangledPair","entangledPairInfo","setEntangledPairInfo","signAllTransactions","displayEntanglementContent","Typography","gutterBottom","handleSubmit","preventDefault","isEnable","noValidate","autoComplete","TextField","label","helperText","FormGroup","endIcon","disabled","Alert","severity","marginTop","AlertTitle","maxWidth","Object","Card","boxShadow","mb","CardContent","Create","setPrice","setPaysEveryTime","setAuthority","required","FormControlLabel","control","Checkbox","checked","Swap","Search","entangledPairs","setEntangledPairs","displayEntangledPairContent","foundEntanglements","entanglement","displayEntanglements","Wizard","history","useHistory","setEntanglements","myNFTs","setMyNFTs","loading","setLoading","process","REACT_APP_WHITELISTED_AUTHORITY","walletNFTMints","allEntanglementsMap","handleEntanglementClick","LinearProgress","d","startIcon","About","steps","alignContent","getWindowDimensions","innerWidth","innerHeight","App","createTheme","windowDimensions","setWindowDimensions","handleResize","addEventListener","removeEventListener","useWindowDimensions","ThemeProvider","CssBaseline","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.51ff9913.chunk.js","sourcesContent":["import {\n  AccountInfo,\n  Connection,\n  Keypair,\n  PublicKey,\n  SystemProgram,\n  SYSVAR_RENT_PUBKEY,\n} from '@solana/web3.js';\n\nimport { Connection as ContextConnection } from '../contexts';\nimport { deserializeUnchecked } from 'borsh';\nimport * as anchor from '@project-serum/anchor';\nimport {\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n  TOKEN_ENTANGLEMENT_PROGRAM_ID,\n  WRAPPED_SOL_MINT,\n} from './ids';\nimport {\n  ASSOCIATED_TOKEN_PROGRAM_ID,\n  Token,\n  TOKEN_PROGRAM_ID,\n} from '@solana/spl-token';\nimport { BN } from '@project-serum/anchor';\nimport { getEdition, getMetadata, getTokenAmount } from './accounts';\nimport mints from './valid_mints.json';\nimport { extendBorsh } from './borsh';\nexport const TOKEN_ENTANGLER = 'token_entangler';\nexport const ESCROW = 'escrow';\nexport const A = 'A';\nexport const B = 'B';\n\nexport class Creator {\n  address: PublicKey;\n  verified: number;\n  share: number;\n\n  constructor(args: { address: PublicKey; verified: number; share: number }) {\n    this.address = args.address;\n    this.verified = args.verified;\n    this.share = args.share;\n  }\n}\n\nexport class Data {\n  name: string;\n  symbol: string;\n  uri: string;\n  sellerFeeBasisPoints: number;\n  creators: Creator[] | null;\n  constructor(args: {\n    name: string;\n    symbol: string;\n    uri: string;\n    sellerFeeBasisPoints: number;\n    creators: Creator[] | null;\n  }) {\n    this.name = args.name;\n    this.symbol = args.symbol;\n    this.uri = args.uri;\n    this.sellerFeeBasisPoints = args.sellerFeeBasisPoints;\n    this.creators = args.creators;\n  }\n}\n\nexport enum MetadataKey {\n  Uninitialized = 0,\n  MetadataV1 = 4,\n  EditionV1 = 1,\n  MasterEditionV1 = 2,\n  MasterEditionV2 = 6,\n  EditionMarker = 7,\n}\nexport class Metadata {\n  key: MetadataKey;\n  updateAuthority: PublicKey;\n  mint: PublicKey;\n  data: Data;\n  primarySaleHappened: boolean;\n  isMutable: boolean;\n  editionNonce: number | null;\n  imageUrl: string | null;\n\n  // set lazy\n  masterEdition?: PublicKey;\n  edition?: PublicKey;\n\n  constructor(args: {\n    updateAuthority: PublicKey;\n    mint: PublicKey;\n    data: Data;\n    primarySaleHappened: boolean;\n    isMutable: boolean;\n    editionNonce: number | null;\n    imageUrl: string | null;\n  }) {\n    this.key = MetadataKey.MetadataV1;\n    this.updateAuthority = args.updateAuthority;\n    this.mint = args.mint;\n    this.data = args.data;\n    this.primarySaleHappened = args.primarySaleHappened;\n    this.isMutable = args.isMutable;\n    this.imageUrl = null;\n    this.editionNonce = args.editionNonce ?? null;\n  }\n}\n\nexport const METADATA_SCHEMA = new Map<any, any>([\n  [\n    Data,\n    {\n      kind: 'struct',\n      fields: [\n        ['name', 'string'],\n        ['symbol', 'string'],\n        ['uri', 'string'],\n        ['sellerFeeBasisPoints', 'u16'],\n        ['creators', { kind: 'option', type: [Creator] }],\n      ],\n    },\n  ],\n  [\n    Creator,\n    {\n      kind: 'struct',\n      fields: [\n        ['address', 'pubkey'],\n        ['verified', 'u8'],\n        ['share', 'u8'],\n      ],\n    },\n  ],\n  [\n    Metadata,\n    {\n      kind: 'struct',\n      fields: [\n        ['key', 'u8'],\n        ['updateAuthority', 'pubkey'],\n        ['mint', 'pubkey'],\n        ['data', Data],\n        ['primarySaleHappened', 'u8'], // bool\n        ['isMutable', 'u8'], // bool\n        ['editionNonce', { kind: 'option', type: 'u8' }],\n      ],\n    },\n  ],\n]);\n\nextendBorsh();\n\n// eslint-disable-next-line no-control-regex\nconst METADATA_REPLACE = new RegExp('\\u0000', 'g');\n\nexport const decodeMetadata = (buffer: Buffer): Metadata => {\n  const metadata = deserializeUnchecked(\n    METADATA_SCHEMA,\n    Metadata,\n    buffer,\n  ) as Metadata;\n  metadata.data.name = metadata.data.name.replace(METADATA_REPLACE, '');\n  metadata.data.uri = metadata.data.uri.replace(METADATA_REPLACE, '');\n  metadata.data.symbol = metadata.data.symbol.replace(METADATA_REPLACE, '');\n  return metadata;\n};\n\nexport const getTokenEntanglement = async (\n  mintA: anchor.web3.PublicKey,\n  mintB: anchor.web3.PublicKey,\n): Promise<[PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [Buffer.from(TOKEN_ENTANGLER), mintA.toBuffer(), mintB.toBuffer()],\n    TOKEN_ENTANGLEMENT_PROGRAM_ID,\n  );\n};\n\nexport const getEpKeyFromArgs = async (\n  anchorProgram: anchor.Program,\n  mintA: PublicKey | null,\n  mintB: PublicKey | null,\n  entangledPair: string | undefined,\n): Promise<PublicKey> => {\n  let epKey;\n  if (!entangledPair) {\n    console.log('No entangled pair detected, generating from mint arguments.');\n    if (mintA && mintB) {\n      epKey = (await getTokenEntanglement(mintA, mintB))[0];\n\n      const obj = await anchorProgram.provider.connection.getAccountInfo(epKey);\n      if (!obj) {\n        epKey = (await getTokenEntanglement(mintB, mintA))[0];\n      }\n    }\n  } else {\n    epKey = new PublicKey(entangledPair);\n  }\n\n  return epKey;\n};\n\nexport const getPriceWithMantissa = async (\n  price: number,\n  mint: PublicKey,\n  walletKeyPair: any,\n  anchorProgram: anchor.Program,\n): Promise<number> => {\n  const token = new Token(\n    anchorProgram.provider.connection,\n    new PublicKey(mint),\n    TOKEN_PROGRAM_ID,\n    walletKeyPair,\n  );\n\n  const mintInfo = await token.getMintInfo();\n\n  const mantissa = 10 ** mintInfo.decimals;\n\n  return Math.ceil(price * mantissa);\n};\n\nexport async function loadTokenEntanglementProgram(\n  anchorWallet: anchor.Wallet,\n  connection: Connection,\n) {\n  const provider = new anchor.Provider(connection, anchorWallet, {\n    preflightCommitment: 'recent',\n  });\n\n  const idl = await anchor.Program.fetchIdl(\n    TOKEN_ENTANGLEMENT_PROGRAM_ID,\n    provider,\n  );\n  //@ts-ignore\n  return new anchor.Program(idl, TOKEN_ENTANGLEMENT_PROGRAM_ID, provider);\n}\n\nexport const getTokenEntanglementEscrows = async (\n  mintA: anchor.web3.PublicKey,\n  mintB: anchor.web3.PublicKey,\n): Promise<[PublicKey, number, PublicKey, number]> => {\n  return [\n    ...(await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from(TOKEN_ENTANGLER),\n        mintA.toBuffer(),\n        mintB.toBuffer(),\n        Buffer.from(ESCROW),\n        Buffer.from(A),\n      ],\n      TOKEN_ENTANGLEMENT_PROGRAM_ID,\n    )),\n    ...(await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from(TOKEN_ENTANGLER),\n        mintA.toBuffer(),\n        mintB.toBuffer(),\n        Buffer.from(ESCROW),\n        Buffer.from(B),\n      ],\n      TOKEN_ENTANGLEMENT_PROGRAM_ID,\n    )),\n  ];\n};\n\nexport const getAtaForMint = async (\n  mint: anchor.web3.PublicKey,\n  buyer: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [buyer.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\n    SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n  );\n};\n\nexport const showEntanglement = async (\n  anchorWallet: anchor.Wallet,\n  connection: Connection,\n  entangledPair: string | undefined,\n  mintA: string | null,\n  mintB: string | null,\n) => {\n  const anchorProgram = await loadTokenEntanglementProgram(\n    anchorWallet,\n    connection,\n  );\n\n  const epKey = await getEpKeyFromArgs(\n    anchorProgram,\n    mintA ? new PublicKey(mintA) : null,\n    mintB ? new PublicKey(mintB) : null,\n    entangledPair,\n  );\n  const epObj = await anchorProgram.account.entangledPair.fetch(epKey);\n  console.log('-----');\n  console.log('Entangled Pair:', epKey.toBase58());\n  //@ts-ignore\n  console.log('Mint:', epObj.treasuryMint.toBase58());\n  //@ts-ignore\n  console.log('Authority:', epObj.authority.toBase58());\n  //@ts-ignore\n  console.log('Mint A:', epObj.mintA.toBase58());\n  //@ts-ignore\n  console.log('Mint B:', epObj.mintB.toBase58());\n  //@ts-ignore\n  console.log('Token A Escrow:', epObj.tokenAEscrow.toBase58());\n  //@ts-ignore\n  console.log('Token B Escrow:', epObj.tokenBEscrow.toBase58());\n  //@ts-ignore\n  console.log('Price:', epObj.price.toNumber());\n  //@ts-ignore\n  console.log('Paid At Least Once:', epObj.paid);\n  //@ts-ignore\n  console.log('Pays Every Time:', epObj.paysEveryTime);\n  //@ts-ignore\n  console.log('Bump:', epObj.bump);\n  return epObj;\n};\n\nexport const createEntanglement = async (\n  anchorWallet: anchor.Wallet,\n  connection: Connection,\n  treasuryMint: string | null,\n  authority: string | null,\n  paysEveryTime: boolean,\n  price: string,\n  mintA: string,\n  mintB: string,\n) => {\n  const anchorProgram = await loadTokenEntanglementProgram(\n    anchorWallet,\n    connection,\n  );\n\n  const priceNumber = parseFloat(price);\n\n  let authorityKey: PublicKey, tMintKey: PublicKey;\n  if (!authority) {\n    console.log('No authority detected, using keypair');\n    authorityKey = anchorWallet.publicKey;\n  } else {\n    console.log('Authority detected, loading keypair...');\n    authorityKey = new PublicKey(authority);\n  }\n\n  const mintAKey = new PublicKey(mintA);\n  const mintBKey = new PublicKey(mintB);\n\n  if (!treasuryMint) {\n    console.log('No treasury mint detected, using SOL.');\n    tMintKey = WRAPPED_SOL_MINT;\n  } else {\n    tMintKey = new PublicKey(treasuryMint);\n  }\n\n  const [entangledPair, bump] = await getTokenEntanglement(mintAKey, mintBKey);\n\n  const [reverseEntangledPair, reverseBump] = await getTokenEntanglement(\n    mintBKey,\n    mintAKey,\n  );\n\n  const [tokenAEscrow, tokenABump, tokenBEscrow, tokenBBump] =\n    await getTokenEntanglementEscrows(mintAKey, mintBKey);\n  const priceAdjusted = new BN(\n    await getPriceWithMantissa(\n      priceNumber,\n      tMintKey,\n      anchorWallet,\n      anchorProgram,\n    ),\n  );\n\n  const ata = (await getAtaForMint(mintBKey, anchorWallet.publicKey))[0];\n  const transferAuthority = Keypair.generate();\n  const signers = [transferAuthority];\n  const instruction = await anchorProgram.instruction.createEntangledPair(\n    bump,\n    reverseBump,\n    tokenABump,\n    tokenBBump,\n    priceAdjusted,\n    paysEveryTime,\n    {\n      accounts: {\n        treasuryMint: tMintKey,\n        payer: anchorWallet.publicKey,\n        transferAuthority: transferAuthority.publicKey,\n        authority: authorityKey,\n        mintA: mintAKey,\n        metadataA: await getMetadata(mintAKey),\n        editionA: await getEdition(mintAKey),\n        mintB: mintBKey,\n        metadataB: await getMetadata(mintBKey),\n        editionB: await getEdition(mintBKey),\n        tokenB: ata,\n        tokenAEscrow,\n        tokenBEscrow,\n        entangledPair,\n        reverseEntangledPair,\n        tokenProgram: TOKEN_PROGRAM_ID,\n        systemProgram: SystemProgram.programId,\n        rent: SYSVAR_RENT_PUBKEY,\n      },\n    },\n  );\n  const instructions = [\n    Token.createApproveInstruction(\n      TOKEN_PROGRAM_ID,\n      ata,\n      transferAuthority.publicKey,\n      anchorWallet.publicKey,\n      [],\n      1,\n    ),\n    instruction,\n    Token.createRevokeInstruction(\n      TOKEN_PROGRAM_ID,\n      ata,\n      anchorWallet.publicKey,\n      [],\n    ),\n  ];\n\n  const createResult = await ContextConnection.sendTransactionWithRetry(\n    connection,\n    anchorWallet,\n    instructions,\n    signers,\n    'max',\n  );\n\n  console.log('Created entanglement', createResult);\n  return createResult;\n};\n\nexport function chunks(array, size) {\n  return Array.apply(0, new Array(Math.ceil(array.length / size))).map(\n    (_, index) => array.slice(index * size, (index + 1) * size),\n  );\n}\n\nexport const swapEntanglement = async (\n  anchorWallet: anchor.Wallet,\n  connection: Connection,\n  mintA: string | null,\n  mintB: string | null,\n  entangledPair: string | undefined,\n) => {\n  const anchorProgram = await loadTokenEntanglementProgram(\n    anchorWallet,\n    connection,\n  );\n\n  const epKey = await getEpKeyFromArgs(\n    anchorProgram,\n    mintA ? new PublicKey(mintA) : null,\n    mintB ? new PublicKey(mintB) : null,\n    entangledPair,\n  );\n  const epObj = await anchorProgram.account.entangledPair.fetch(epKey);\n  //@ts-ignore\n  const mintAKey = epObj.mintA;\n  //@ts-ignore\n  const mintBKey = epObj.mintB;\n  const aAta = (await getAtaForMint(mintAKey, anchorWallet.publicKey))[0];\n  const bAta = (await getAtaForMint(mintBKey, anchorWallet.publicKey))[0];\n  const currABal = await getTokenAmount(anchorProgram, aAta, mintAKey);\n  const token = currABal === 1 ? aAta : bAta,\n    replacementToken = currABal === 1 ? bAta : aAta;\n  const tokenMint = currABal === 1 ? mintAKey : mintBKey,\n    replacementTokenMint = currABal === 1 ? mintBKey : mintAKey;\n  const result = await getTokenEntanglementEscrows(mintAKey, mintBKey);\n\n  const tokenAEscrow = result[0];\n  const tokenBEscrow = result[2];\n  const transferAuthority = Keypair.generate();\n  const paymentTransferAuthority = Keypair.generate();\n  const replacementTokenMetadata = await getMetadata(replacementTokenMint);\n  const signers = [transferAuthority];\n\n  //@ts-ignore\n  const isNative = epObj.treasuryMint.equals(WRAPPED_SOL_MINT);\n\n  //@ts-ignore\n  const paymentAccount = isNative\n    ? anchorWallet.publicKey\n    : //@ts-ignore\n      (await getAtaForMint(epObj.treasuryMint, anchorWallet.publicKey))[0];\n\n  if (!isNative) signers.push(paymentTransferAuthority);\n  const remainingAccounts = [];\n\n  const metadataObj = await anchorProgram.provider.connection.getAccountInfo(\n    replacementTokenMetadata,\n  );\n  const metadataDecoded: Metadata = decodeMetadata(\n    //@ts-ignore\n    Buffer.from(metadataObj.data),\n  );\n  //@ts-ignore\n  for (let i = 0; i < metadataDecoded.data.creators.length; i++) {\n    remainingAccounts.push({\n      //@ts-ignore\n      pubkey: new PublicKey(metadataDecoded.data.creators[i].address),\n      //@ts-ignore\n      isWritable: true,\n      //@ts-ignore\n      isSigner: false,\n    });\n    if (!isNative) {\n      remainingAccounts.push({\n        //@ts-ignore\n        pubkey: (\n          await getAtaForMint(\n            //@ts-ignore\n            epObj.treasuryMint,\n            //@ts-ignore\n            remainingAccounts[remainingAccounts.length - 1].pubkey,\n          )\n        )[0],\n        //@ts-ignore\n        isWritable: true,\n        //@ts-ignore\n        isSigner: false,\n      });\n    }\n  }\n  const instruction = await anchorProgram.instruction.swap({\n    accounts: {\n      //@ts-ignore\n      treasuryMint: epObj.treasuryMint,\n      payer: anchorWallet.publicKey,\n      paymentAccount,\n      transferAuthority: transferAuthority.publicKey,\n      paymentTransferAuthority: paymentTransferAuthority.publicKey,\n      token,\n      replacementTokenMetadata,\n      replacementToken,\n      replacementTokenMint,\n      tokenAEscrow,\n      tokenBEscrow,\n      entangledPair: epKey,\n      tokenProgram: TOKEN_PROGRAM_ID,\n      systemProgram: SystemProgram.programId,\n      ataProgram: ASSOCIATED_TOKEN_PROGRAM_ID,\n      rent: SYSVAR_RENT_PUBKEY,\n    },\n    remainingAccounts,\n  });\n\n  if (!isNative) {\n    instruction.keys\n      .filter(k => k.pubkey.equals(paymentTransferAuthority.publicKey))\n      .map(k => (k.isSigner = true));\n  }\n\n  const instructions = [\n    Token.createApproveInstruction(\n      TOKEN_PROGRAM_ID,\n      token,\n      transferAuthority.publicKey,\n      anchorWallet.publicKey,\n      [],\n      1,\n    ),\n    ...(!isNative\n      ? [\n          Token.createApproveInstruction(\n            TOKEN_PROGRAM_ID,\n            paymentAccount,\n            paymentTransferAuthority.publicKey,\n            anchorWallet.publicKey,\n            [],\n            //@ts-ignore\n            epObj.price.toNumber(),\n          ),\n        ]\n      : []),\n    instruction,\n    Token.createRevokeInstruction(\n      TOKEN_PROGRAM_ID,\n      token,\n      anchorWallet.publicKey,\n      [],\n    ),\n    ...(!isNative\n      ? [\n          Token.createRevokeInstruction(\n            TOKEN_PROGRAM_ID,\n            paymentAccount,\n            anchorWallet.publicKey,\n            [],\n          ),\n        ]\n      : []),\n  ];\n  const txnResult = await ContextConnection.sendTransactionWithRetry(\n    anchorProgram.provider.connection,\n    anchorWallet,\n    instructions,\n    signers,\n    'max',\n  );\n\n  console.log(\n    'Swapped',\n    tokenMint.toBase58(),\n    'mint for',\n    replacementTokenMint.toBase58(),\n    ' with entangled pair ',\n    epKey.toBase58(),\n  );\n  return { txnResult, epkey: epKey.toBase58() };\n};\n\nexport const searchEntanglements = async (\n  anchorWallet: anchor.Wallet,\n  connection: Connection,\n  mint: string,\n  authority: string,\n) => {\n  const anchorProgram = await loadTokenEntanglementProgram(\n    anchorWallet,\n    connection,\n  );\n\n  const searchMint = new PublicKey(mint);\n  const searchAuthority = new PublicKey(authority);\n\n  const searchMintAAccounts =\n    await anchorProgram.provider.connection.getProgramAccounts(\n      TOKEN_ENTANGLEMENT_PROGRAM_ID,\n      {\n        filters: [\n          // Filter for MintA\n          {\n            memcmp: {\n              offset: 32 + 8,\n              bytes: searchMint.toString(),\n            },\n          },\n          {\n            memcmp: {\n              offset: 8 + 160,\n              bytes: searchAuthority.toString(),\n            },\n          },\n        ],\n      },\n    );\n  const searchMintBAccounts =\n    await anchorProgram.provider.connection.getProgramAccounts(\n      TOKEN_ENTANGLEMENT_PROGRAM_ID,\n      {\n        filters: [\n          // Filter for MintB\n          {\n            memcmp: {\n              offset: 64 + 8,\n              bytes: searchMint.toString(),\n            },\n          },\n          {\n            memcmp: {\n              offset: 8 + 160,\n              bytes: searchAuthority.toString(),\n            },\n          },\n        ],\n      },\n    );\n\n  const entanglementsAccounts = [\n    ...searchMintAAccounts,\n    ...searchMintBAccounts,\n  ];\n\n  let entanglements: any[] = [];\n  await Promise.all(\n    chunks(Array.from(Array(entanglementsAccounts.length).keys()), 100).map(\n      async allIndexesInSlice => {\n        const entanglementData = await getMultipleAccounts(\n          anchorProgram.provider.connection,\n          allIndexesInSlice.map(e =>\n            entanglementsAccounts[e].pubkey.toBase58(),\n          ),\n          'single',\n        );\n        const decodedEntanglementData = entanglementData.array.map(a =>\n          anchorProgram.account.entangledPair.coder.accounts.decode(\n            'EntangledPair',\n            a.data,\n          ),\n        );\n        entanglements = entanglements.concat(decodedEntanglementData);\n      },\n    ),\n  );\n  const reducedEntanglements = entanglements.filter(\n    en =>\n      //@ts-ignore\n      mints.includes(en.mintA.toBase58()) &&\n      //@ts-ignore\n      mints.includes(en.mintB.toBase58()),\n  );\n\n  let metadata: Metadata[] = [];\n  await Promise.all(\n    chunks(Array.from(Array(reducedEntanglements.length).keys()), 100).map(\n      async allIndexesInSlice => {\n        const metadataAKey: PublicKey[] = [];\n        const metadataBKey: PublicKey[] = [];\n        for (let i = 0; i < allIndexesInSlice.length; i++) {\n          metadataAKey.push(\n            await getMetadata(reducedEntanglements[allIndexesInSlice[i]].mintA),\n          );\n          metadataBKey.push(\n            await getMetadata(reducedEntanglements[allIndexesInSlice[i]].mintB),\n          );\n        }\n        const metadatasA = await getMultipleAccounts(\n          anchorProgram.provider.connection,\n          metadataAKey.map(a => a.toBase58()),\n          'single',\n        );\n        const metadatasB = await getMultipleAccounts(\n          anchorProgram.provider.connection,\n          metadataBKey.map(a => a.toBase58()),\n          'single',\n        );\n        const decodedMetadata = [\n          ...metadatasA.array.map(a => decodeMetadata(a.data)),\n          ...metadatasB.array.map(a => decodeMetadata(a.data)),\n        ];\n        await Promise.all(\n          chunks(Array.from(Array(decodedMetadata.length).keys()), 10).map(\n            async allIndexesInSlice => {\n              for (let j = 0; j < allIndexesInSlice.length; j++) {\n                const json = await fetch(\n                  decodedMetadata[allIndexesInSlice[j]].data.uri,\n                );\n                const decoded = JSON.parse(await json.text());\n                decodedMetadata[allIndexesInSlice[j]].imageUrl = decoded.image;\n              }\n            },\n          ),\n        );\n        metadata = metadata.concat(decodedMetadata);\n      },\n    ),\n  );\n\n  // console.log('Found', mint, entanglements.length, 'entanglements');\n  return { entanglements: reducedEntanglements, metadata };\n};\n\nexport const getMultipleAccounts = async (\n  connection: any,\n  keys: string[],\n  commitment: string,\n) => {\n  const result = await Promise.all(\n    chunks(keys, 99).map(chunk =>\n      getMultipleAccountsCore(connection, chunk, commitment),\n    ),\n  );\n\n  const array = result\n    .map(\n      a =>\n        //@ts-ignore\n        a.array.map(acc => {\n          if (!acc) {\n            return undefined;\n          }\n\n          const { data, ...rest } = acc;\n          const obj = {\n            ...rest,\n            data: Buffer.from(data[0], 'base64'),\n          } as AccountInfo<Buffer>;\n          return obj;\n        }) as AccountInfo<Buffer>[],\n    )\n    //@ts-ignore\n    .flat();\n  return { keys, array };\n};\n\nconst getMultipleAccountsCore = async (\n  connection: any,\n  keys: string[],\n  commitment: string,\n) => {\n  const args = connection._buildArgs([keys], commitment, 'base64');\n\n  const unsafeRes = await connection._rpcRequest('getMultipleAccounts', args);\n  if (unsafeRes.error) {\n    throw new Error(\n      'failed to get info about account ' + unsafeRes.error.message,\n    );\n  }\n\n  if (unsafeRes.result.value) {\n    const array = unsafeRes.result.value as AccountInfo<string[]>[];\n    return { keys, array };\n  }\n\n  // TODO: fix\n  throw new Error();\n};\n\nexport const getOwnedNFTMints = async (\n  anchorWallet: anchor.Wallet,\n  connection: Connection,\n) => {\n  const anchorProgram = await loadTokenEntanglementProgram(\n    anchorWallet,\n    connection,\n  );\n\n  const TokenAccounts =\n    await anchorProgram.provider.connection.getParsedTokenAccountsByOwner(\n      anchorWallet.publicKey,\n      { programId: TOKEN_PROGRAM_ID },\n    );\n  const NFTMints = TokenAccounts.value\n    .map(val => val.account.data.parsed)\n    .filter(\n      val =>\n        val.info.tokenAmount.amount !== 0 &&\n        val.info.tokenAmount.decimals === 0 &&\n        //@ts-ignore\n        mints.includes(val.info.mint),\n    );\n\n  return NFTMints;\n};\n","import * as anchor from '@project-serum/anchor';\nimport { Connection, PublicKey } from '@solana/web3.js';\nimport {\n  AccountLayout,\n  MintInfo,\n  MintLayout,\n  TOKEN_PROGRAM_ID,\n} from '@solana/spl-token';\nimport BN from 'bn.js';\n\nimport log from 'loglevel';\nimport {\n  CANDY_MACHINE_ID,\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n  TOKEN_METADATA_PROGRAM_ID,\n  TOKEN_ENTANGLEMENT_PROGRAM_ID,\n  WRAPPED_SOL_MINT,\n} from './ids';\n\nexport const TOKEN_ENTANGLER = 'token_entangler';\n\nexport const getTokenEntanglement = async (\n  mintA: anchor.web3.PublicKey,\n  mintB: anchor.web3.PublicKey,\n): Promise<[PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [Buffer.from(TOKEN_ENTANGLER), mintA.toBuffer(), mintB.toBuffer()],\n    TOKEN_ENTANGLEMENT_PROGRAM_ID,\n  );\n};\n\nexport const getEpKeyFromArgs = async (\n  anchorProgram: anchor.Program,\n  mintA: PublicKey | null,\n  mintB: PublicKey | null,\n  entangledPair: string | undefined,\n): Promise<PublicKey> => {\n  let epKey;\n  if (!entangledPair) {\n    log.info('No entangled pair detected, generating from mint arguments.');\n    if (mintA && mintB) {\n      epKey = (await getTokenEntanglement(mintA, mintB))[0];\n\n      const obj = await anchorProgram.provider.connection.getAccountInfo(epKey);\n      if (!obj) {\n        epKey = (await getTokenEntanglement(mintB, mintA))[0];\n      }\n    }\n  } else {\n    epKey = new PublicKey(entangledPair);\n  }\n\n  return epKey;\n};\n\nexport const getMintInfo = async (\n  connection: Connection,\n  mint: string,\n): Promise<{ key: PublicKey; info: MintInfo }> => {\n  let mintKey: PublicKey;\n  try {\n    mintKey = new PublicKey(mint);\n  } catch (err) {\n    throw new Error(`Invalid mint key ${err}`);\n  }\n  const mintAccount = await connection.getAccountInfo(mintKey);\n  if (mintAccount === null) {\n    throw new Error(`Could not fetch mint`);\n  }\n  if (!mintAccount.owner.equals(TOKEN_PROGRAM_ID)) {\n    const mintOwner = mintAccount.owner.toBase58();\n    throw new Error(`Invalid mint owner ${mintOwner}`);\n  }\n  if (mintAccount.data.length !== MintLayout.span) {\n    throw new Error(`Invalid mint size ${mintAccount.data.length}`);\n  }\n  const mintInfo = MintLayout.decode(Buffer.from(mintAccount.data));\n  return {\n    key: mintKey,\n    info: mintInfo,\n  };\n};\n\nexport const getCreatorTokenAccount = async (\n  walletKey: PublicKey,\n  connection: Connection,\n  mintKey: PublicKey,\n  totalClaim: number,\n) => {\n  const [creatorTokenKey] = await PublicKey.findProgramAddress(\n    [walletKey.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mintKey.toBuffer()],\n    SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n  );\n  const creatorTokenAccount = await connection.getAccountInfo(creatorTokenKey);\n  if (creatorTokenAccount === null) {\n    throw new Error(`Could not fetch creator token account`);\n  }\n  if (creatorTokenAccount.data.length !== AccountLayout.span) {\n    throw new Error(\n      `Invalid token account size ${creatorTokenAccount.data.length}`,\n    );\n  }\n  const creatorTokenInfo = AccountLayout.decode(\n    Buffer.from(creatorTokenAccount.data),\n  );\n  if (new BN(creatorTokenInfo.amount, 8, 'le').toNumber() < totalClaim) {\n    throw new Error(`Creator token account does not have enough tokens`);\n  }\n  return creatorTokenKey;\n};\n\nexport const fetchCoder = async (\n  address: anchor.Address,\n  connection: Connection,\n): Promise<anchor.Coder | null> => {\n  //@ts-ignore\n  return new anchor.Coder(\n    //@ts-ignore\n    await anchor.Program.fetchIdl(address, {\n      connection: connection,\n    } as anchor.Provider),\n  );\n};\n\nexport const getCandyConfig = async (\n  connection: Connection,\n  config: string,\n): Promise<PublicKey> => {\n  let configKey: PublicKey;\n  try {\n    configKey = new PublicKey(config);\n  } catch (err) {\n    throw new Error(`Invalid config key ${err}`);\n  }\n  const configAccount = await connection.getAccountInfo(configKey);\n  if (configAccount === null) {\n    throw new Error(`Could not fetch config`);\n  }\n  if (!configAccount.owner.equals(CANDY_MACHINE_ID)) {\n    throw new Error(`Invalid config owner ${configAccount.owner.toBase58()}`);\n  }\n  return configKey;\n};\n\nexport const getCandyMachineAddress = async (\n  config: PublicKey,\n  uuid: string,\n) => {\n  return await PublicKey.findProgramAddress(\n    [Buffer.from('candy_machine'), config.toBuffer(), Buffer.from(uuid)],\n    CANDY_MACHINE_ID,\n  );\n};\n\nexport async function loadTokenEntanglementProgram(\n  anchorWallet: anchor.Wallet,\n  connection: Connection,\n) {\n  const provider = new anchor.Provider(connection, anchorWallet, {\n    preflightCommitment: 'recent',\n  });\n\n  const idl = await anchor.Program.fetchIdl(\n    TOKEN_ENTANGLEMENT_PROGRAM_ID,\n    provider,\n  );\n  //@ts-ignore\n  return new anchor.Program(idl, TOKEN_ENTANGLEMENT_PROGRAM_ID, provider);\n}\n\nexport const getCandyMachine = async (\n  connection: Connection,\n  candyMachineKey: PublicKey,\n) => {\n  const candyMachineCoder = await fetchCoder(CANDY_MACHINE_ID, connection);\n  if (candyMachineCoder === null) {\n    throw new Error(`Could not fetch candy machine IDL`);\n  }\n  const candyMachineAccount = await connection.getAccountInfo(candyMachineKey);\n  if (candyMachineAccount === null) {\n    throw new Error(`Could not fetch candy machine`);\n  }\n  return candyMachineCoder.accounts.decode(\n    'CandyMachine',\n    candyMachineAccount.data,\n  );\n};\n\nexport const getMetadata = async (mint: PublicKey): Promise<PublicKey> => {\n  return (\n    await PublicKey.findProgramAddress(\n      [\n        Buffer.from('metadata'),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n      ],\n      TOKEN_METADATA_PROGRAM_ID,\n    )\n  )[0];\n};\n\nexport const getEdition = async (mint: PublicKey): Promise<PublicKey> => {\n  return (\n    await PublicKey.findProgramAddress(\n      [\n        Buffer.from('metadata'),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n        Buffer.from('edition'),\n      ],\n      TOKEN_METADATA_PROGRAM_ID,\n    )\n  )[0];\n};\n\nexport const getEditionMarkerPda = async (\n  mint: PublicKey,\n  edition: BN,\n): Promise<PublicKey> => {\n  // editions are divided into pages of 31-bytes (248-bits) for more efficient\n  // packing to check if an edition is occupied. The offset is determined from\n  // the edition passed in through data\n  const editionPageNumber = edition.div(new BN(248)).toNumber();\n\n  return (\n    await PublicKey.findProgramAddress(\n      [\n        Buffer.from('metadata'),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n        Buffer.from('edition'),\n        Buffer.from(String(editionPageNumber)),\n      ],\n      TOKEN_METADATA_PROGRAM_ID,\n    )\n  )[0];\n};\n\nexport async function getTokenAmount(\n  anchorProgram: anchor.Program,\n  account: anchor.web3.PublicKey,\n  mint: anchor.web3.PublicKey,\n): Promise<number> {\n  let amount = 0;\n  if (!mint.equals(WRAPPED_SOL_MINT)) {\n    try {\n      const token =\n        await anchorProgram.provider.connection.getTokenAccountBalance(account);\n      amount = token?.value?.uiAmount\n        ? token.value.uiAmount * Math.pow(10, token.value.decimals)\n        : 0;\n    } catch (e) {\n      log.error(e);\n      log.info(\n        'Account ',\n        account.toBase58(),\n        'didnt return value. Assuming 0 tokens.',\n      );\n    }\n  } else {\n    amount = await anchorProgram.provider.connection.getBalance(account);\n  }\n  return amount;\n}\n","import React from 'react';\nimport { useWallet } from '@solana/wallet-adapter-react';\nimport { ENDPOINTS, useColorMode, useConnectionConfig } from '../../contexts';\nimport { CopyOutlined } from '@ant-design/icons';\nimport { ModalEnum, useModal, useWalletModal } from '../../contexts';\nimport {\n  Box,\n  Button,\n  Collapse,\n  Divider,\n  Drawer,\n  FormControl,\n  Link,\n  List,\n  ListItem,\n  ListItemText,\n  ListItemButton,\n  MenuItem,\n  Select,\n  Stack,\n} from '@mui/material';\nimport { useTheme } from '@mui/material/styles';\n\nimport AccountBalanceWalletIcon from '@mui/icons-material/AccountBalanceWallet';\nimport Brightness4Icon from '@mui/icons-material/Brightness4';\nimport Brightness7Icon from '@mui/icons-material/Brightness7';\nimport ExpandLess from '@mui/icons-material/ExpandLess';\nimport ExpandMore from '@mui/icons-material/ExpandMore';\nimport { notification } from 'antd';\n\n// shorten the checksummed version of the input address to have 4 characters at start and end\nexport function shortenAddress(address: string, chars = 4): string {\n  return `${address.slice(0, chars)}...${address.slice(-chars)}`;\n}\n\n// import Link from '../components/Link';\n\nexport function notify({\n  message = '',\n  description = undefined as any,\n  txid = '',\n  type = 'info',\n  placement = 'bottomLeft',\n}) {\n  if (txid) {\n    //   <Link\n    //     external\n    //     to={'https://explorer.solana.com/tx/' + txid}\n    //     style={{ color: '#0000ff' }}\n    //   >\n    //     View transaction {txid.slice(0, 8)}...{txid.slice(txid.length - 8)}\n    //   </Link>\n\n    description = <></>;\n  }\n  (notification as any)[type]({\n    message: <span style={{ color: 'black' }}>{message}</span>,\n    description: (\n      <span style={{ color: 'black', opacity: 0.5 }}>{description}</span>\n    ),\n    placement,\n    style: {\n      backgroundColor: 'white',\n    },\n  });\n}\n\nexport const Settings = ({ narrow }: { narrow: boolean }) => {\n  const { disconnect, publicKey } = useWallet();\n  const { setEndpoint, env, endpoint } = useConnectionConfig();\n  const { setVisible } = useWalletModal();\n  const open = React.useCallback(() => setVisible(true), [setVisible]);\n  const { setModal } = useModal();\n  const theme = useTheme();\n  const colorModeCtx = useColorMode();\n\n  const handleConnect = React.useCallback(() => {\n    setModal(ModalEnum.WALLET);\n    setVisible(true);\n  }, [setModal, setVisible]);\n\n  const connectedActions = [\n    {\n      click: async () => {\n        if (publicKey) {\n          await navigator.clipboard.writeText(publicKey.toBase58());\n          notify({\n            message: 'Wallet update',\n            description: 'Address copied to clipboard',\n          });\n        }\n      },\n      innerNarrow: () =>\n        `Copy Address (${publicKey && shortenAddress(publicKey.toBase58())})`,\n      inner: function ConnectedWalletCopyC() {\n        return (\n          <React.Fragment>\n            <CopyOutlined />\n            {publicKey && shortenAddress(publicKey.toBase58())}\n          </React.Fragment>\n        );\n      },\n    },\n    {\n      click: open,\n      inner: () => 'Change\\u00A0Wallet',\n    },\n    {\n      click: () => disconnect().catch(),\n      inner: () => `Disconnect\\u00A0(${env})`,\n      expandedExtra: {\n        // these are interepreted as props. TODO: specific types\n        color: 'error' as any,\n        variant: 'contained' as any,\n      },\n    },\n  ];\n\n  const [drawerOpen, setDrawerOpen] = React.useState(false);\n  const [envCollapseOpen, setEnvCollapseOpen] = React.useState(false);\n\n  const hackySkipSet = 'hackySkipSet';\n  const toggleDrawer = open => event => {\n    if (\n      event.type === 'keydown' &&\n      (event.key === 'Tab' || event.key === 'Shift')\n    ) {\n      return;\n    }\n\n    if (event.target.classList.contains(hackySkipSet)) {\n      return;\n    }\n\n    setDrawerOpen(open);\n  };\n\n  const drawerC = inner => {\n    return (\n      <React.Fragment>\n        <Button onClick={toggleDrawer(true)}>\n          <AccountBalanceWalletIcon />\n        </Button>\n        <Drawer anchor=\"right\" open={drawerOpen} onClose={toggleDrawer(false)}>\n          <Box\n            sx={{ width: 250 }}\n            role=\"presentation\"\n            onClick={toggleDrawer(false)}\n            onKeyDown={toggleDrawer(false)}\n          >\n            {inner}\n          </Box>\n        </Drawer>\n      </React.Fragment>\n    );\n  };\n\n  const themeSwitch = (\n    <Button\n      sx={{ ml: 1 }}\n      onClick={colorModeCtx.toggleColorMode}\n      color=\"inherit\"\n    >\n      {theme.palette.mode === 'dark' ? (\n        <Brightness7Icon />\n      ) : (\n        <Brightness4Icon />\n      )}\n    </Button>\n  );\n\n  if (narrow) {\n    const listHead = (\n      <ListItem>\n        <ListItemText\n          primary=\"Wallet\"\n          primaryTypographyProps={{\n            fontSize: '1.2rem',\n            fontWeight: 'medium',\n            letterSpacing: 0,\n          }}\n        />\n      </ListItem>\n    );\n    return (\n      <React.Fragment>\n        {!publicKey &&\n          drawerC(\n            <List>\n              {listHead}\n              <Divider />\n              <ListItemButton\n                onClick={() => setEnvCollapseOpen(!envCollapseOpen)}\n                className={hackySkipSet}\n              >\n                Change Network\n                {envCollapseOpen ? <ExpandLess /> : <ExpandMore />}\n              </ListItemButton>\n              <Collapse in={envCollapseOpen} timeout=\"auto\" unmountOnExit>\n                <List component=\"div\" disablePadding>\n                  {ENDPOINTS.map(p => (\n                    <ListItemButton\n                      selected={endpoint === p.endpoint}\n                      onClick={() => setEndpoint(p.endpoint)}\n                      key={p.name}\n                      sx={{ pl: 4 }}\n                      className={hackySkipSet}\n                    >\n                      {p.name}\n                    </ListItemButton>\n                  ))}\n                </List>\n              </Collapse>\n              <ListItemButton onClick={handleConnect}>Connect</ListItemButton>\n            </List>,\n          )}\n        {publicKey &&\n          drawerC(\n            <List>\n              {listHead}\n              <Divider />\n              {connectedActions.map((a, idx) => {\n                return (\n                  <ListItemButton onClick={a.click} key={idx}>\n                    {(a.innerNarrow && a.innerNarrow()) || a.inner()}\n                  </ListItemButton>\n                );\n              })}\n            </List>,\n          )}\n        {themeSwitch}\n      </React.Fragment>\n    );\n  } else {\n    return (\n      <Stack\n        direction=\"row\"\n        spacing={2}\n        sx={{\n          display: 'flex',\n          justifyContent: 'flex-end',\n          alignItems: 'center',\n          marginRight: '36px',\n        }}\n      >\n        {!publicKey && (\n          <React.Fragment>\n            <FormControl variant=\"standard\" style={{ minWidth: '10ch' }}>\n              <Select\n                id=\"connected-env-select\"\n                onChange={e => {\n                  setEndpoint(e.target.value);\n                }}\n                value={endpoint}\n              >\n                {ENDPOINTS.map(({ name, endpoint }) => (\n                  <MenuItem key={name} value={endpoint}>\n                    {name}\n                  </MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n            <Link underline=\"none\">\n              <Button variant=\"contained\" onClick={handleConnect}>\n                Connect\n              </Button>\n            </Link>\n          </React.Fragment>\n        )}\n        {publicKey &&\n          connectedActions.map((a, idx) => {\n            return (\n              <Button\n                key={idx}\n                variant=\"outlined\"\n                onClick={a.click}\n                {...a.expandedExtra}\n              >\n                {a.inner()}\n              </Button>\n            );\n          })}\n        {themeSwitch}\n      </Stack>\n    );\n  }\n};\n","import { PublicKey } from '@solana/web3.js';\nimport { BinaryReader, BinaryWriter } from 'borsh';\nimport base58 from 'bs58';\nimport { StringPublicKey } from './ids';\n\nexport const extendBorsh = () => {\n  (BinaryReader.prototype as any).readPubkey = function () {\n    const reader = this as unknown as BinaryReader;\n    const array = reader.readFixedArray(32);\n    return new PublicKey(array);\n  };\n\n  (BinaryWriter.prototype as any).writePubkey = function (value: PublicKey) {\n    const writer = this as unknown as BinaryWriter;\n    writer.writeFixedArray(value.toBuffer());\n  };\n\n  (BinaryReader.prototype as any).readPubkeyAsString = function () {\n    const reader = this as unknown as BinaryReader;\n    const array = reader.readFixedArray(32);\n    return base58.encode(array) as StringPublicKey;\n  };\n\n  (BinaryWriter.prototype as any).writePubkeyAsString = function (\n    value: StringPublicKey,\n  ) {\n    const writer = this as unknown as BinaryWriter;\n    writer.writeFixedArray(base58.decode(value));\n  };\n\n  // BTreeMap<u32, u32>\n  (BinaryReader.prototype as any).readMap32 = function () {\n    const reader = this as unknown as BinaryReader;\n    const map = new Map();\n    const length = reader.readU32();\n    for (let i = 0; i < length; i++) {\n      const key = reader.readU32();\n      const val = reader.readU32();\n      map.set(key, val);\n    }\n    return map;\n  };\n\n  // BTreeMap<u32, u32>\n  (BinaryWriter.prototype as any).writeMap32 = function (\n    value: Map<number, number>,\n  ) {\n    const writer = this as unknown as BinaryWriter;\n    value.forEach((val, key) => {\n      writer.writeU32(key);\n      writer.writeU32(val);\n    });\n  };\n};\n\nextendBorsh();\n","import {\n  Blockhash,\n  Commitment,\n  Connection,\n  FeeCalculator,\n  Keypair,\n  RpcResponseAndContext,\n  SignatureStatus,\n  SimulatedTransactionResponse,\n  Transaction,\n  TransactionInstruction,\n  TransactionSignature,\n} from '@solana/web3.js';\nimport log from 'loglevel';\n\ninterface BlockhashAndFeeCalculator {\n  blockhash: Blockhash;\n  feeCalculator: FeeCalculator;\n}\n\nexport const DEFAULT_TIMEOUT = 15000;\n\nexport const getUnixTs = () => {\n  return new Date().getTime() / 1000;\n};\n\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nexport const envFor = (connection: Connection): string => {\n  const endpoint = (connection as any)._rpcEndpoint;\n  const regex = /https:\\/\\/api.([^.]*).solana.com/;\n  const match = endpoint.match(regex);\n  if (match[1]) {\n    return match[1];\n  }\n  return 'mainnet-beta';\n};\n\nexport const explorerLinkFor = (\n  txid: TransactionSignature,\n  connection: Connection,\n): string => {\n  return `https://explorer.solana.com/tx/${txid}?cluster=${envFor(connection)}`;\n};\n\nexport const sendTransactionWithRetryWithKeypair = async (\n  connection: Connection,\n  wallet: Keypair,\n  instructions: TransactionInstruction[],\n  signers: Keypair[],\n  commitment: Commitment = 'singleGossip',\n  includesFeePayer: boolean = false,\n  block?: BlockhashAndFeeCalculator,\n  beforeSend?: () => void,\n) => {\n  const transaction = new Transaction();\n  instructions.forEach(instruction => transaction.add(instruction));\n  transaction.recentBlockhash = (\n    block || (await connection.getRecentBlockhash(commitment))\n  ).blockhash;\n\n  if (includesFeePayer) {\n    transaction.setSigners(...signers.map(s => s.publicKey));\n  } else {\n    transaction.setSigners(\n      // fee payed by the wallet owner\n      wallet.publicKey,\n      ...signers.map(s => s.publicKey),\n    );\n  }\n\n  if (signers.length > 0) {\n    transaction.sign(...[wallet, ...signers]);\n  } else {\n    transaction.sign(wallet);\n  }\n\n  if (beforeSend) {\n    beforeSend();\n  }\n\n  const { txid, slot } = await sendSignedTransaction({\n    connection,\n    signedTransaction: transaction,\n  });\n\n  return { txid, slot };\n};\n\nexport async function sendSignedTransaction({\n  signedTransaction,\n  connection,\n  timeout = DEFAULT_TIMEOUT,\n}: {\n  signedTransaction: Transaction;\n  connection: Connection;\n  sendingMessage?: string;\n  sentMessage?: string;\n  successMessage?: string;\n  timeout?: number;\n}): Promise<{ txid: string; slot: number }> {\n  const rawTransaction = signedTransaction.serialize();\n  const startTime = getUnixTs();\n  let slot = 0;\n  const txid: TransactionSignature = await connection.sendRawTransaction(\n    rawTransaction,\n    {\n      skipPreflight: true,\n    },\n  );\n\n  log.debug('Started awaiting confirmation for', txid);\n\n  let done = false;\n  (async () => {\n    while (!done && getUnixTs() - startTime < timeout) {\n      connection.sendRawTransaction(rawTransaction, {\n        skipPreflight: true,\n      });\n      await sleep(500);\n    }\n  })();\n  try {\n    const confirmation = await awaitTransactionSignatureConfirmation(\n      txid,\n      timeout,\n      connection,\n      'confirmed',\n      true,\n    );\n\n    if (!confirmation)\n      throw new Error('Timed out awaiting confirmation on transaction');\n\n    if (confirmation.err) {\n      log.error(confirmation.err);\n      throw new Error('Transaction failed: Custom instruction error');\n    }\n\n    slot = confirmation?.slot || 0;\n  } catch (err) {\n    log.error('Timeout Error caught', err);\n    if (err.timeout) {\n      throw new Error('Timed out awaiting confirmation on transaction');\n    }\n    let simulateResult: SimulatedTransactionResponse | null = null;\n    try {\n      simulateResult = (\n        await simulateTransaction(connection, signedTransaction, 'single')\n      ).value;\n    } catch (e) {\n      log.error('Simulate Transaction error', e);\n    }\n    if (simulateResult && simulateResult.err) {\n      if (simulateResult.logs) {\n        for (let i = simulateResult.logs.length - 1; i >= 0; --i) {\n          const line = simulateResult.logs[i];\n          if (line.startsWith('Program log: ')) {\n            throw new Error(\n              'Transaction failed: ' + line.slice('Program log: '.length),\n            );\n          }\n        }\n      }\n      throw new Error(JSON.stringify(simulateResult.err));\n    }\n    // throw new Error('Transaction failed');\n  } finally {\n    done = true;\n  }\n\n  log.debug('Latency (ms)', txid, getUnixTs() - startTime);\n  return { txid, slot };\n}\n\nasync function simulateTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  commitment: Commitment,\n): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n  // @ts-ignore\n  transaction.recentBlockhash = await connection._recentBlockhash(\n    // @ts-ignore\n    connection._disableBlockhashCaching,\n  );\n\n  const signData = transaction.serializeMessage();\n  // @ts-ignore\n  const wireTransaction = transaction._serialize(signData);\n  const encodedTransaction = wireTransaction.toString('base64');\n  const config: any = { encoding: 'base64', commitment };\n  const args = [encodedTransaction, config];\n\n  // @ts-ignore\n  const res = await connection._rpcRequest('simulateTransaction', args);\n  if (res.error) {\n    throw new Error('failed to simulate transaction: ' + res.error.message);\n  }\n  return res.result;\n}\n\nexport async function awaitTransactionSignatureConfirmation(\n  txid: TransactionSignature,\n  timeout: number,\n  connection: Connection,\n  commitment: Commitment = 'recent',\n  queryStatus = false,\n): Promise<SignatureStatus | null | void> {\n  let done = false;\n  let status: SignatureStatus | null | void = {\n    slot: 0,\n    confirmations: 0,\n    err: null,\n  };\n  let subId = 0;\n  // eslint-disable-next-line no-async-promise-executor\n  status = await new Promise(async (resolve, reject) => {\n    setTimeout(() => {\n      if (done) {\n        return;\n      }\n      done = true;\n      log.warn('Rejecting for timeout...');\n      reject({ timeout: true });\n    }, timeout);\n    try {\n      subId = connection.onSignature(\n        txid,\n        (result, context) => {\n          done = true;\n          status = {\n            err: result.err,\n            slot: context.slot,\n            confirmations: 0,\n          };\n          if (result.err) {\n            log.warn('Rejected via websocket', result.err);\n            reject(status);\n          } else {\n            log.debug('Resolved via websocket', result);\n            resolve(status);\n          }\n        },\n        commitment,\n      );\n    } catch (e) {\n      done = true;\n      log.error('WS error in setup', txid, e);\n    }\n    while (!done && queryStatus) {\n      // eslint-disable-next-line no-loop-func\n      (async () => {\n        try {\n          const signatureStatuses = await connection.getSignatureStatuses([\n            txid,\n          ]);\n          status = signatureStatuses && signatureStatuses.value[0];\n          console.log(explorerLinkFor(txid, connection));\n          if (!done) {\n            if (!status) {\n              log.debug('REST null result for', txid, status);\n            } else if (status.err) {\n              log.error('REST error for', txid, status);\n              done = true;\n              reject(status.err);\n            } else if (!status.confirmations) {\n              log.error('REST no confirmations for', txid, status);\n            } else {\n              log.debug('REST confirmation for', txid, status);\n              done = true;\n              resolve(status);\n            }\n          }\n        } catch (e) {\n          if (!done) {\n            log.error('REST connection error: txid', txid, e);\n          }\n        }\n      })();\n      await sleep(2000);\n    }\n  });\n\n  //@ts-ignore\n  if (connection._signatureSubscriptions[subId])\n    connection.removeSignatureListener(subId);\n  done = true;\n  log.debug('Returning status', status);\n  return status;\n}\n","import {\n  Keypair,\n  Commitment,\n  Connection,\n  Transaction,\n  TransactionInstruction,\n  Blockhash,\n  FeeCalculator,\n} from '@solana/web3.js';\nimport React, {\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react';\nimport { sendSignedTransaction } from '../utils/transactions';\nimport {\n  TokenInfo,\n  TokenListProvider,\n  ENV as ChainId,\n} from '@solana/spl-token-registry';\nimport { WalletSigner } from './WalletContext/WalletContext';\nimport { WalletNotConnectedError } from '@solana/wallet-adapter-base';\n\ntype UseStorageReturnValue = {\n  getItem: (key: string) => string;\n  setItem: (key: string, value: string) => boolean;\n  removeItem: (key: string) => void;\n};\n\nexport const useLocalStorage = (): UseStorageReturnValue => {\n  const isBrowser: boolean = ((): boolean => typeof window !== 'undefined')();\n\n  const getItem = (key: string): string => {\n    return isBrowser ? window.localStorage[key] : '';\n  };\n\n  const setItem = (key: string, value: string): boolean => {\n    if (isBrowser) {\n      window.localStorage.setItem(key, value);\n      return true;\n    }\n\n    return false;\n  };\n\n  const removeItem = (key: string): void => {\n    window.localStorage.removeItem(key);\n  };\n\n  return {\n    getItem,\n    setItem,\n    removeItem,\n  };\n};\n\nexport function useLocalStorageState<T>(\n  key: string,\n  defaultState?: T,\n): [T, (key: string) => void] {\n  const localStorage = useLocalStorage();\n  const [state, setState] = useState(() => {\n    console.debug('Querying local storage', key);\n    const storedState = localStorage.getItem(key);\n    console.debug('Retrieved local storage', storedState);\n    if (storedState) {\n      return JSON.parse(storedState);\n    }\n    return defaultState;\n  });\n\n  const setLocalStorageState = useCallback(\n    newState => {\n      const changed = state !== newState;\n      if (!changed) {\n        return;\n      }\n      setState(newState);\n      if (newState === null) {\n        localStorage.removeItem(key);\n      } else {\n        try {\n          localStorage.setItem(key, JSON.stringify(newState));\n        } catch {\n          // ignore\n        }\n      }\n    },\n    [state, key, localStorage],\n  );\n\n  return [state, setLocalStorageState];\n}\ninterface BlockhashAndFeeCalculator {\n  blockhash: Blockhash;\n  feeCalculator: FeeCalculator;\n}\n\nexport type ENV = 'mainnet-beta' | 'testnet' | 'devnet' | 'localnet';\n\nexport const ENDPOINTS = [\n  {\n    name: 'mainnet-beta' as ENV,\n    endpoint: 'https://api.metaplex.solana.com/',\n    ChainId: ChainId.MainnetBeta,\n  },\n  {\n    name: 'devnet' as ENV,\n    endpoint: 'https://api.devnet.solana.com/',\n    ChainId: ChainId.Devnet,\n  },\n];\n\nconst DEFAULT = ENDPOINTS[0].endpoint;\n\ninterface ConnectionConfig {\n  connection: Connection;\n  endpoint: string;\n  env: ENV;\n  setEndpoint: (val: string) => void;\n  tokens: TokenInfo[];\n  tokenMap: Map<string, TokenInfo>;\n}\n\nconst ConnectionContext = React.createContext<ConnectionConfig>({\n  endpoint: DEFAULT,\n  setEndpoint: () => {},\n  connection: new Connection(DEFAULT, 'recent'),\n  env: ENDPOINTS[0].name,\n  tokens: [],\n  tokenMap: new Map<string, TokenInfo>(),\n});\n\nexport function ConnectionProvider({\n  children = undefined,\n}: {\n  children: React.ReactNode;\n}) {\n  const [endpoint, setEndpoint] = useLocalStorageState(\n    'connectionEndpoint',\n    ENDPOINTS[0].endpoint,\n  );\n\n  const connection = useMemo(\n    () => new Connection(endpoint, 'recent'),\n    [endpoint],\n  );\n\n  const env =\n    ENDPOINTS.find(end => end.endpoint === endpoint)?.name || ENDPOINTS[0].name;\n\n  const [tokens, setTokens] = useState<TokenInfo[]>([]);\n  const [tokenMap, setTokenMap] = useState<Map<string, TokenInfo>>(new Map());\n  useEffect(() => {\n    // fetch token files\n    new TokenListProvider().resolve().then(container => {\n      const list = container\n        .excludeByTag('nft')\n        .filterByChainId(\n          ENDPOINTS.find(end => end.endpoint === endpoint)?.ChainId ||\n            ChainId.MainnetBeta,\n        )\n        .getList();\n\n      const knownMints = [...list].reduce((map, item) => {\n        map.set(item.address, item);\n        return map;\n      }, new Map<string, TokenInfo>());\n\n      setTokenMap(knownMints);\n      setTokens(list);\n    });\n  }, [env, endpoint]);\n\n  // The websocket library solana/web3.js uses closes its websocket connection when the subscription list\n  // is empty after opening its first time, preventing subsequent subscriptions from receiving responses.\n  // This is a hack to prevent the list from every getting empty\n  useEffect(() => {\n    const id = connection.onAccountChange(\n      Keypair.generate().publicKey,\n      () => {},\n    );\n    return () => {\n      connection.removeAccountChangeListener(id);\n    };\n  }, [connection]);\n\n  useEffect(() => {\n    const id = connection.onSlotChange(() => null);\n    return () => {\n      connection.removeSlotChangeListener(id);\n    };\n  }, [connection]);\n\n  return (\n    <ConnectionContext.Provider\n      value={{\n        endpoint,\n        setEndpoint,\n        connection,\n        tokens,\n        tokenMap,\n        env,\n      }}\n    >\n      {children}\n    </ConnectionContext.Provider>\n  );\n}\n\nexport function useConnection() {\n  return useContext(ConnectionContext).connection as Connection;\n}\n\nexport function useConnectionConfig() {\n  const context = useContext(ConnectionContext);\n  return {\n    endpoint: context.endpoint,\n    setEndpoint: context.setEndpoint,\n    env: context.env,\n    tokens: context.tokens,\n    tokenMap: context.tokenMap,\n  };\n}\n\nexport const getErrorForTransaction = async (\n  connection: Connection,\n  txid: string,\n) => {\n  // wait for all confirmation before geting transaction\n  await connection.confirmTransaction(txid, 'max');\n\n  const tx = await connection.getParsedConfirmedTransaction(txid);\n\n  const errors: string[] = [];\n  if (tx?.meta && tx.meta.logMessages) {\n    tx.meta.logMessages.forEach(log => {\n      const regex = /Error: (.*)/gm;\n      let m;\n      while ((m = regex.exec(log)) !== null) {\n        // This is necessary to avoid infinite loops with zero-width matches\n        if (m.index === regex.lastIndex) {\n          regex.lastIndex++;\n        }\n\n        if (m.length > 1) {\n          errors.push(m[1]);\n        }\n      }\n    });\n  }\n\n  return errors;\n};\n\nexport enum SequenceType {\n  Sequential,\n  Parallel,\n  StopOnFailure,\n}\n\nexport const sendTransactionWithRetry = async (\n  connection: Connection,\n  wallet: WalletSigner,\n  instructions: TransactionInstruction[],\n  signers: Keypair[],\n  commitment: Commitment = 'singleGossip',\n  includesFeePayer: boolean = false,\n  block?: BlockhashAndFeeCalculator,\n  beforeSend?: () => void,\n): Promise<string | { txid: string; slot: number }> => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n\n  let transaction = new Transaction();\n  instructions.forEach(instruction => transaction.add(instruction));\n  transaction.recentBlockhash = (\n    block || (await connection.getRecentBlockhash(commitment))\n  ).blockhash;\n\n  if (includesFeePayer) {\n    transaction.setSigners(...signers.map(s => s.publicKey));\n  } else {\n    transaction.setSigners(\n      // fee payed by the wallet owner\n      wallet.publicKey,\n      ...signers.map(s => s.publicKey),\n    );\n  }\n\n  if (signers.length > 0) {\n    transaction.partialSign(...signers);\n  }\n  if (!includesFeePayer) {\n    try {\n      transaction = await wallet.signTransaction(transaction);\n    } catch {\n      return 'Failed to sign transaction';\n    }\n  }\n\n  if (beforeSend) {\n    beforeSend();\n  }\n  console.log('About to send');\n  try {\n    const { txid, slot } = await sendSignedTransaction({\n      connection,\n      signedTransaction: transaction,\n    });\n\n    return { txid, slot };\n  } catch (error) {\n    console.error(error);\n    return 'See console logs';\n  }\n};\n","import React from \"react\";\nimport { Modal } from \"antd\";\n\n// import \"./index.css\";\n\nexport const DefaultModal = (props: any) => {\n  const { children, bodyStyle, width, ...rest } = props;\n\n  return (\n    <Modal\n      style={{ background: \"transparent\", borderRadius: 16 }}\n      bodyStyle={{\n        background: \"#333333\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n        ...bodyStyle,\n      }}\n      footer={null}\n      width={\n        width || 400\n      }\n      {...rest}\n    >\n      {children}\n    </Modal>\n  );\n};\n","import { WalletAdapter, WalletError } from '@solana/wallet-adapter-base';\nimport {\n  useWallet,\n  WalletProvider as BaseWalletProvider,\n} from '@solana/wallet-adapter-react';\nimport {\n  getLedgerWallet,\n  getMathWallet,\n  getPhantomWallet,\n  getSolflareWallet,\n  getSolletWallet,\n  getSolongWallet,\n  getTorusWallet,\n} from '@solana/wallet-adapter-wallets';\nimport { Button } from 'antd';\nimport React, {\n  createContext,\n  FC,\n  ReactNode,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react';\nimport { DefaultModal, notify } from '../../components';\n\nimport './wallet.less';\n\nexport interface WalletModalContextState {\n  visible: boolean;\n  setVisible: (open: boolean) => void;\n}\n\nexport const WalletModalContext = createContext<WalletModalContextState>(\n  {} as WalletModalContextState,\n);\n\nexport function useWalletModal(): WalletModalContextState {\n  return useContext(WalletModalContext);\n}\n\nexport const WalletModal: FC = () => {\n  const { wallets, wallet: selected, select } = useWallet();\n  const { visible, setVisible } = useWalletModal();\n  const [, setShowWallets] = useState(false);\n  const close = useCallback(() => {\n    setVisible(false);\n    setShowWallets(false);\n  }, [setVisible, setShowWallets]);\n\n  return (\n    <DefaultModal visible={visible} onCancel={close}>\n      <div\n        style={{\n          background:\n            'linear-gradient(180deg, #D329FC 0%, #8F6DDE 49.48%, #19E6AD 100%)',\n          borderRadius: 36,\n          width: 50,\n          height: 50,\n          textAlign: 'center',\n          verticalAlign: 'middle',\n          fontWeight: 700,\n          fontSize: '1.3rem',\n          lineHeight: 2.4,\n          marginBottom: 10,\n        }}\n      ></div>\n      <h2\n        style={{\n          color: 'white',\n          fontWeight: 'bold',\n          fontSize: '1.2rem',\n        }}\n      >\n        {selected ? 'Change provider' : ''}\n      </h2>\n      <p style={{ color: 'white', fontSize: '1rem' }}>\n        {selected\n          ? 'Choose from the following options:'\n          : 'Please sign into your wallet'}\n      </p>\n\n      <br />\n      {wallets.map(wallet => {\n        return (\n          <Button\n            key={wallet.name}\n            size=\"large\"\n            type={wallet === selected ? 'primary' : 'ghost'}\n            onClick={() => {\n              select(wallet.name);\n              close();\n            }}\n            icon={\n              <img\n                alt={`${wallet.name}`}\n                width={20}\n                height={20}\n                src={wallet.icon}\n                style={{ marginRight: 30, float: 'left' }}\n              />\n            }\n            style={{\n              display: 'block',\n              width: '100%',\n              textAlign: 'left',\n              marginBottom: 8,\n              color: 'white',\n            }}\n          >\n            {wallet.name}\n          </Button>\n        );\n      })}\n    </DefaultModal>\n  );\n};\n\nexport const WalletModalProvider: FC<{ children: ReactNode }> = ({\n  children,\n}) => {\n  const { publicKey } = useWallet();\n  const [connected, setConnected] = useState(!!publicKey);\n  const [visible, setVisible] = useState(false);\n\n  useEffect(() => {\n    if (publicKey) {\n      const base58 = publicKey.toBase58();\n      const keyToDisplay =\n        base58.length > 20\n          ? `${base58.substring(0, 7)}.....${base58.substring(\n              base58.length - 7,\n              base58.length,\n            )}`\n          : base58;\n\n      notify({\n        message: 'Wallet update',\n        description: 'Connected to wallet ' + keyToDisplay,\n      });\n    }\n  }, [publicKey]);\n\n  useEffect(() => {\n    if (!publicKey && connected) {\n      notify({\n        message: 'Wallet update',\n        description: 'Disconnected from wallet',\n      });\n    }\n    setConnected(!!publicKey);\n  }, [publicKey, connected, setConnected]);\n\n  return (\n    <WalletModalContext.Provider\n      value={{\n        visible,\n        setVisible,\n      }}\n    >\n      {children}\n      <WalletModal />\n    </WalletModalContext.Provider>\n  );\n};\n\nexport const WalletProvider: FC<{ children: ReactNode }> = ({ children }) => {\n  const wallets = useMemo(\n    () => [\n      getPhantomWallet(),\n      getSolflareWallet(),\n      getTorusWallet({\n        options: {\n          clientId:\n            'BEB_D44HovHuXH0Ace97QVqSu1ahCKndjpGhzhVcMy_9XmDTbHyqTbzQTufcyaN0kFwtlVbfPzJwpJXg94gWJqE',\n          uxMode: 'redirect',\n        },\n      }),\n      getLedgerWallet(),\n      getSolongWallet(),\n      getMathWallet(),\n      getSolletWallet(),\n    ],\n    [],\n  );\n\n  const onError = useCallback((error: WalletError) => {\n    console.error(error);\n    notify({\n      message: 'Wallet error',\n      description: error.message,\n    });\n  }, []);\n\n  return (\n    <BaseWalletProvider wallets={wallets} onError={onError} autoConnect>\n      <WalletModalProvider>{children}</WalletModalProvider>\n    </BaseWalletProvider>\n  );\n};\n\nexport type WalletSigner = Pick<\n  WalletAdapter,\n  'publicKey' | 'signTransaction' | 'signAllTransactions'\n>;\n","export default __webpack_public_path__ + \"static/media/wallet.c746d144.less\";","import React, { useState, useContext, useCallback } from 'react';\n\nimport { WalletModal } from './WalletContext/WalletContext';\n\nexport enum ModalEnum {\n  WALLET = 'wallet',\n}\n\ntype ModalContextProps = {\n  setModal: (modal: ModalEnum | undefined) => void;\n  removeModal: () => void;\n};\n\nexport const ModalContext = React.createContext<ModalContextProps>({\n  setModal: () => null,\n  removeModal: () => null,\n});\n\nexport const ModalProvider: React.FC = ({ children }) => {\n  const [modal, setModal] = useState<ModalEnum | undefined>(undefined);\n\n  const removeModal = useCallback(() => {\n    setModal(undefined);\n  }, [setModal]);\n\n  return (\n    <ModalContext.Provider\n      value={{\n        setModal,\n        removeModal,\n      }}\n    >\n      {children}\n      {modal === ModalEnum.WALLET && <WalletModal />}\n    </ModalContext.Provider>\n  );\n};\n\nexport const useModal = (): ModalContextProps => {\n  const context = useContext(ModalContext);\n  if (context === undefined) {\n    throw new Error('useModal must be used within a ModalProvider');\n  }\n  return context;\n};\n","import { useTheme } from \"@mui/material\";\nimport React, { useContext } from \"react\";\n\nexport const ColorModeContext = React.createContext({});\n\nexport const ColorModeContextProvider = ({ children = undefined } : { children : React.ReactNode }) => {\n  const [mode, setMode] = React.useState<'light' | 'dark'>('dark'); \n  const theme = useTheme();\n  const toggleColorMode = () => {\n    setMode((prevMode) => (prevMode === 'light' ? 'dark' : 'light'));\n  }\n  return (\n    <ColorModeContext.Provider\n      value={{\n        toggleColorMode,\n        mode,\n        theme,\n      }}\n    >\n      {children}\n    </ColorModeContext.Provider>\n  );\n};\n\nexport const useColorMode = (): any => {\n  const context = useContext(ColorModeContext);\n  return context;\n};\n","import { PublicKey } from '@solana/web3.js';\n\nexport type StringPublicKey = string;\n\nexport const CANDY_MACHINE_ID = new PublicKey(\n  'cndyAnrLdpjq1Ssp1z8xxDsB8dxe7u4HL5Nxi2K5WXZ',\n);\n\nexport const GUMDROP_DISTRIBUTOR_ID = new PublicKey(\n  'gdrpGjVffourzkdDRrQmySw4aTHr8a3xmQzzxSwFD1a',\n);\n\nexport const GUMDROP_TEMPORAL_SIGNER = new PublicKey(\n  'MSv9H2sMceAzccBganUXwGq3GXgqYAstmZAbFDZYbAV',\n);\n\nexport const SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID = new PublicKey(\n  'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',\n);\n\nexport const TOKEN_METADATA_PROGRAM_ID = new PublicKey(\n  'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s',\n);\n\nexport const TOKEN_ENTANGLEMENT_PROGRAM_ID = new PublicKey(\n  'qntmGodpGkrM42mN68VCZHXnKqDCT8rdY23wFcXCLPd',\n);\n\nexport const WRAPPED_SOL_MINT = new PublicKey(\n  'So11111111111111111111111111111111111111112',\n);\n","import React from \"react\";\nimport {\n  Link,\n} from \"react-router-dom\";\nimport {\n  Box,\n  Button,\n  Divider,\n  Drawer,\n  List,\n  ListItem,\n  ListItemButton,\n  ListItemText,\n  Stack,\n} from \"@mui/material\";\nimport HomeIcon from '@mui/icons-material/Home';\nimport MenuIcon from '@mui/icons-material/Menu';\n\nimport { Settings } from \"../Settings\";\n\nexport const Header = ({ narrow }: { narrow: boolean }) => {\n  const navs = [\n    {\n      href: `/entanglement/`,\n      innerNarrow: \"About\",\n      inner: <HomeIcon />,\n    },\n\n    {\n      href: `/entanglement/create`,\n      inner: \"Create\",\n\n    },\n    {\n      href: `/entanglement/show`,\n      inner: \"Show\",\n    },\n\n    {\n      href: `/entanglement/swap`,\n      inner: \"Swap\",\n    },\n    {\n      href: `/entanglement/search`,\n      inner: \"Search\",\n    },\n    {\n      href: `/entanglement/wizard`,\n      inner: \"Wizard\",\n    },\n\n  ];\n\n  const [drawerOpen, setDrawerOpen] = React.useState(false);\n\n  const toggleDrawer = (open) => (event) => {\n    if (event.type === 'keydown' && (event.key === 'Tab' || event.key === 'Shift')) {\n      return;\n    }\n\n    setDrawerOpen(open);\n  };\n\n  return (\n    <Box\n      sx={{\n        height: \"52px\",\n        display: \"flex\",\n        bgcolor: \"action.disabledBackground\",\n        overflow: \"auto\",\n      }}\n    >\n      {narrow\n        ? (\n          <React.Fragment>\n            <Button onClick={toggleDrawer(true)}>\n              <MenuIcon />\n            </Button>\n            <Drawer\n              open={drawerOpen}\n              onClose={toggleDrawer(false)}\n            >\n              <Box\n                sx={{ width: 250 }}\n                role=\"presentation\"\n                onClick={toggleDrawer(false)}\n                onKeyDown={toggleDrawer(false)}\n              >\n                <List>\n                  <ListItem>\n                    <ListItemText\n                      primary=\"Token Entangler\"\n                      primaryTypographyProps={{\n                        fontSize: \"1.2rem\",\n                        fontWeight: 'medium',\n                        letterSpacing: 0,\n                      }}\n                    />\n                  </ListItem>\n                  <Divider />\n                  {navs.map((nav, idx) => {\n                    return (\n                      <Link to={nav.href} key={idx} style={{ color: \"inherit\" }}>\n                        <ListItemButton>\n                          {nav.innerNarrow || nav.inner}\n                        </ListItemButton>\n                      </Link>\n                    );\n                  })}\n                </List>\n              </Box>\n            </Drawer>\n          </React.Fragment>\n        )\n        : (\n          <Stack\n            direction=\"row\"\n            spacing={2}\n            sx={{\n              display: \"flex\",\n              justifyContent: \"flex-start\",\n              alignItems: \"center\",\n              marginLeft: \"36px\",\n            }}\n          >\n            {navs.map((nav, idx) => {\n              return (\n                <Link to={nav.href} key={idx}>\n                  <Button variant=\"outlined\" style={{ minWidth: 0 }}>\n                    {nav.inner}\n                  </Button>\n                </Link>\n              );\n            })}\n          </Stack>\n        )\n      }\n      <Box sx={{ flexGrow: 1, minWidth: \"36px\" }}></Box>\n      <Settings narrow={narrow} />\n    </Box>\n  );\n};\n","import React from 'react';\nimport { useConnection } from '../contexts';\nimport { useWallet } from '@solana/wallet-adapter-react';\nimport { useMemo, useEffect } from 'react';\nimport * as anchor from '@project-serum/anchor';\nimport { showEntanglement } from '../utils/entangler';\nimport { Box, Button, FormGroup, TextField } from '@mui/material';\nimport Typography from '@mui/material/Typography';\nimport SendIcon from '@mui/icons-material/Send';\nimport Alert from '@mui/material/Alert';\nimport AlertTitle from '@mui/material/AlertTitle';\nimport Card from '@mui/material/Card';\nimport CardContent from '@mui/material/CardContent';\n\nexport const Show = () => {\n  const connection = useConnection();\n  const wallet = useWallet();\n\n  const [mintA, setMintA] = React.useState(localStorage.getItem('mintA') || '');\n  const [mintB, setMintB] = React.useState(localStorage.getItem('mintB') || '');\n  const [entangledPair, setEntangledPair] = React.useState(\n    localStorage.getItem('entangledPair') || '',\n  );\n  const [entangledPairInfo, setEntangledPairInfo] = React.useState({});\n\n  const anchorWallet = useMemo(() => {\n    if (\n      !wallet ||\n      !wallet.publicKey ||\n      !wallet.signAllTransactions ||\n      !wallet.signTransaction\n    ) {\n      return;\n    }\n\n    return {\n      publicKey: wallet.publicKey,\n      signAllTransactions: wallet.signAllTransactions,\n      signTransaction: wallet.signTransaction,\n    } as anchor.Wallet;\n  }, [wallet]);\n\n  useEffect(() => {\n    (async () => {\n      if (!anchorWallet) {\n        return;\n      }\n    })();\n  }, [anchorWallet]);\n\n  const displayEntanglement = (e: any) => {\n    return (\n      <Card\n        sx={{ minWidth: 275, boxShadow: 3, mb: 3 }}\n        key={e.mintA.toString()}\n      >\n        <CardContent>\n          <Typography sx={{ fontSize: 19 }} component=\"div\" gutterBottom>\n            <strong>Entanglement Info</strong>\n          </Typography>\n          {displayEntanglementContent(e)}\n        </CardContent>\n      </Card>\n    );\n  };\n\n  const displayEntanglementContent = (e: any) => {\n    return (\n      <Typography\n        variant=\"body2\"\n        color=\"text.secondary\"\n        key={e.mintB.toString()}\n        gutterBottom\n      >\n        <strong>Treasury Mint</strong> : {e.treasuryMint} <br />\n        <strong>Authority</strong> : {e.authority} <br />\n        <strong>Mint A</strong> : {e.mintA} <br />\n        <strong>Mint B</strong> : {e.mintB} <br />\n        <strong>Token A Escrow</strong> : {e.tokenAEscrow} <br />\n        <strong>Token B Escrow</strong> : {e.tokenBEscrow} <br />\n        <strong>Price</strong> : {e.price} <br />\n        <strong>Paid At Least Once</strong> : {e.paid} <br />\n        <strong>Paid Every Time</strong> : {e.paysEveryTime} <br />\n        <strong>Bump</strong> : {e.bump} <br />\n      </Typography>\n    );\n  };\n\n  const handleSubmit = async (event: React.MouseEvent<HTMLElement>) => {\n    event.preventDefault();\n    if (!anchorWallet) {\n      return;\n    }\n    try {\n      const epObj: any = await showEntanglement(\n        anchorWallet,\n        connection,\n        entangledPair,\n        mintA,\n        mintB,\n      );\n      const info = {\n        treasuryMint: epObj.treasuryMint.toBase58(),\n        authority: epObj.authority.toBase58(),\n        mintA: epObj.mintA.toBase58(),\n        mintB: epObj.mintB.toBase58(),\n        tokenAEscrow: epObj.tokenAEscrow.toBase58(),\n        tokenBEscrow: epObj.tokenBEscrow.toBase58(),\n        price: epObj.price.toNumber(),\n        paid: epObj.paid.toString(),\n        paysEveryTime: epObj.paysEveryTime.toString(),\n        bump: epObj.bump,\n      };\n\n      setEntangledPairInfo(info);\n    } catch (e) {\n      // TODO Show Error\n      if (e instanceof Error) {\n        console.error(e.message);\n      }\n    }\n  };\n\n  const isEnable = (\n    mintA: string,\n    mintB: string,\n    entangledPair: string,\n  ): boolean => {\n    return (\n      // eslint-disable-next-line no-extra-boolean-cast\n      (!!mintA && !!mintB && !!!entangledPair) ||\n      (!(!!mintA || !!mintB) && !!entangledPair)\n    );\n  };\n\n  return (\n    <React.Fragment>\n      <Typography variant=\"h4\" color=\"text.primary\" gutterBottom>\n        Show Entanglement\n      </Typography>\n      <p>Enter MintA and MintB or Entangled Pair.</p>\n\n      <Box\n        component=\"form\"\n        sx={{\n          '& .MuiTextField-root': { m: 1, width: '25ch' },\n        }}\n        noValidate\n        autoComplete=\"off\"\n      >\n        <TextField\n          id=\"mintA-text-field\"\n          label=\"MintA\"\n          value={mintA}\n          onChange={e => {\n            localStorage.setItem('mintA', e.target.value);\n            setMintA(e.target.value);\n          }}\n        />\n        <TextField\n          id=\"mintB-text-field\"\n          label=\"MintB\"\n          value={mintB}\n          onChange={e => {\n            localStorage.setItem('mintB', e.target.value);\n            setMintB(e.target.value);\n          }}\n        />\n        <TextField\n          id=\"price-text-field\"\n          helperText=\"Entangled pair\"\n          label=\"Entangled pair\"\n          value={entangledPair}\n          onChange={e => {\n            localStorage.setItem('entangledPair', e.target.value);\n            setEntangledPair(e.target.value);\n          }}\n        />\n        <FormGroup>\n          <Button\n            variant=\"contained\"\n            onClick={async e => await handleSubmit(e)}\n            endIcon={<SendIcon />}\n            disabled={!isEnable(mintA, mintB, entangledPair)}\n          >\n            Show Entanglement\n          </Button>\n        </FormGroup>\n        {!isEnable(mintA, mintB, entangledPair) && (\n          <Alert severity=\"warning\" style={{ marginTop: '1rem' }}>\n            <AlertTitle>Warning</AlertTitle>\n            The three input are filled. You should enter MintA and MintB or\n            Entangled Pair.\n          </Alert>\n        )}\n      </Box>\n      <Box sx={{ maxWidth: 'md', display: 'block', marginTop: '2rem' }}>\n        {Object.keys(entangledPairInfo).length > 0 &&\n          displayEntanglement(entangledPairInfo)}\n      </Box>\n    </React.Fragment>\n  );\n};\n","import { Button, Checkbox, FormControlLabel, FormGroup, TextField } from \"@mui/material\";\nimport Box from '@mui/material/Box';\nimport SendIcon from '@mui/icons-material/Send';\nimport Typography from '@mui/material/Typography';\nimport Alert from '@mui/material/Alert';\nimport AlertTitle from '@mui/material/AlertTitle';\nimport { useMemo, useEffect } from 'react';\n\n\nimport {\n    useWallet,\n} from \"@solana/wallet-adapter-react\";\nimport React from \"react\";\nimport * as anchor from '@project-serum/anchor';\n\nimport {\n    useConnection,\n} from \"../contexts\";\nimport { createEntanglement } from \"../utils/entangler\";\n\nexport const Create = () => {\n    const connection = useConnection();\n    const wallet = useWallet();\n    const anchorWallet = useMemo(() => {\n        if (\n            !wallet ||\n            !wallet.publicKey ||\n            !wallet.signAllTransactions ||\n            !wallet.signTransaction\n        ) {\n            return;\n        }\n\n        return {\n            publicKey: wallet.publicKey,\n            signAllTransactions: wallet.signAllTransactions,\n            signTransaction: wallet.signTransaction,\n        } as anchor.Wallet;\n    }, [wallet]);\n\n    const [mintA, setMintA] = React.useState(localStorage.getItem(\"mintA\") || \"\");\n    const [mintB, setMintB] = React.useState(localStorage.getItem(\"mintB\") || \"\");\n    const [price, setPrice] = React.useState(localStorage.getItem(\"price\") || \"\");\n    const [paysEveryTime, setPaysEveryTime] = React.useState(false);\n    const [authority, setAuthority] = React.useState(localStorage.getItem(\"authority\") || \"\");\n\n    useEffect(() => {\n        (async () => {\n            if (!anchorWallet) {\n                return;\n            }\n            setAuthority(anchorWallet.publicKey.toString())\n\n        })()\n    }, [\n        anchorWallet,\n    ]);\n\n\n\n    const handleSubmit = async (event: React.MouseEvent<HTMLElement>) => {\n        event.preventDefault();\n        if (!anchorWallet) {\n            return;\n        }\n        const res = await createEntanglement(anchorWallet, connection, null, authority, paysEveryTime, price, mintA, mintB);\n        console.log(res);\n    };\n\n    const isEnable = (mintA: string, mintB: string, authority: string, price: string): boolean => {\n        return (\n            // eslint-disable-next-line no-extra-boolean-cast\n            !!mintA && !!mintB && !!price && !!authority\n        )\n    }\n\n    return (\n        <React.Fragment>\n            <Typography variant=\"h4\" color=\"text.primary\" gutterBottom >Create Entanglement</Typography>\n            <p>\n                Create an entanglement between two NFTs. Using connected wallet as entanglement authority.\n            </p>\n\n            <Box\n                component=\"form\"\n                sx={{\n                    '& .MuiTextField-root': { m: 1, width: '25ch' },\n                }}\n                noValidate\n                autoComplete=\"off\"\n            >\n                <TextField\n                    required\n                    id=\"mintA-text-field\"\n                    label=\"MintA\"\n                    helperText=\"You do not even need to own this token to create this entanglement.\"\n                    value={mintA}\n                    onChange={(e) => {\n                        localStorage.setItem(\"mintA\", e.target.value);\n                        setMintA(e.target.value);\n                    }}\n                />\n                <TextField\n                    required\n                    id=\"mintB-text-field\"\n                    label=\"MintB\"\n                    helperText=\"This token will be removed from your token account right now.\"\n                    value={mintB}\n                    onChange={(e) => {\n                        localStorage.setItem(\"mintB\", e.target.value);\n                        setMintB(e.target.value);\n                    }}\n                />\n                <TextField\n                    required\n                    id=\"authority-text-field\"\n                    label=\"Authority\"\n                    helperText=\"Entanglement Authority\"\n                    value={authority}\n                    onChange={(e) => {\n                        localStorage.setItem(\"authority\", e.target.value);\n                        setAuthority(e.target.value);\n                    }}\n                />\n                <TextField\n                    required\n                    id=\"price-text-field\"\n                    helperText=\"Price for a swap\"\n                    label=\"Price\"\n                    value={price}\n                    onChange={(e) => {\n                        localStorage.setItem(\"price\", e.target.value);\n                        setPrice(e.target.value);\n                    }}\n                />\n                <FormGroup>\n                    <FormControlLabel control={<Checkbox checked={paysEveryTime} onChange={(e) => { setPaysEveryTime(e.target.checked) }} />} label=\"Pay the swapping fee each swap\" />\n                </FormGroup>\n                <FormGroup>\n                    <Button\n                        variant=\"contained\"\n                        onClick={async (e) => await handleSubmit(e)}\n                        endIcon={<SendIcon />}\n                        disabled={!isEnable(mintA, mintB, price, authority)}\n                    >\n                        Entangle\n                    </Button>\n                </FormGroup>\n                { !isEnable(mintA, mintB, price, authority) && \n                    <Alert severity=\"warning\" style={{ marginTop: \"1rem\" }}>\n                        <AlertTitle>Warning</AlertTitle>\n                        You should fill the four inputs.\n                    </Alert>\n                }\n\n            </Box>\n\n\n        </React.Fragment>\n    )\n\n}","import React from 'react';\nimport { useConnection } from '../contexts';\nimport { useWallet } from '@solana/wallet-adapter-react';\nimport { useMemo, useEffect } from 'react';\nimport * as anchor from '@project-serum/anchor';\nimport { swapEntanglement } from '../utils/entangler';\nimport { Box, Button, FormGroup, TextField } from '@mui/material';\nimport Typography from '@mui/material/Typography';\nimport SendIcon from '@mui/icons-material/Send';\n\nexport const Swap = () => {\n  const connection = useConnection();\n  const wallet = useWallet();\n\n  const [mintA, setMintA] = React.useState(localStorage.getItem('mintA') || '');\n  const [mintB, setMintB] = React.useState(localStorage.getItem('mintB') || '');\n  const [entangledPair, setEntangledPair] = React.useState(\n    localStorage.getItem('entangledPair') || '',\n  );\n\n  const anchorWallet = useMemo(() => {\n    if (\n      !wallet ||\n      !wallet.publicKey ||\n      !wallet.signAllTransactions ||\n      !wallet.signTransaction\n    ) {\n      return;\n    }\n\n    return {\n      publicKey: wallet.publicKey,\n      signAllTransactions: wallet.signAllTransactions,\n      signTransaction: wallet.signTransaction,\n    } as anchor.Wallet;\n  }, [wallet]);\n\n  useEffect(() => {\n    (async () => {\n      if (!anchorWallet) {\n        return;\n      }\n    })();\n  }, [anchorWallet]);\n\n  const handleSubmit = async (event: React.MouseEvent<HTMLElement>) => {\n    event.preventDefault();\n    if (!anchorWallet) {\n      return;\n    }\n    const txnResult = await swapEntanglement(\n      anchorWallet,\n      connection,\n      mintA,\n      mintB,\n      entangledPair,\n    );\n    setEntangledPair(txnResult.epkey);\n  };\n\n  const isEnable = (\n    mintA: string,\n    mintB: string,\n    entangledPair: string,\n  ): boolean => {\n    return (\n      // eslint-disable-next-line no-extra-boolean-cast\n      (!!mintA && !!mintB && !!!entangledPair) ||\n      (!(!!mintA || !!mintB) && !!entangledPair)\n    );\n  };\n\n  return (\n    <React.Fragment>\n      <Typography variant=\"h4\" color=\"text.primary\" gutterBottom>\n        Swap Entanglement\n      </Typography>\n      <p>Enter MintA and MintB or Entangled Pair.</p>\n\n      <Box\n        component=\"form\"\n        sx={{\n          '& .MuiTextField-root': { m: 1, width: '25ch' },\n        }}\n        noValidate\n        autoComplete=\"off\"\n      >\n        <TextField\n          id=\"mintA-text-field\"\n          label=\"MintA\"\n          value={mintA}\n          onChange={e => {\n            localStorage.setItem('mintA', e.target.value);\n            setMintA(e.target.value);\n          }}\n        />\n        <TextField\n          id=\"mintB-text-field\"\n          label=\"MintB\"\n          value={mintB}\n          onChange={e => {\n            localStorage.setItem('mintB', e.target.value);\n            setMintB(e.target.value);\n          }}\n        />\n        <TextField\n          id=\"price-text-field\"\n          helperText=\"Entangled pair\"\n          label=\"Entangled pair\"\n          value={entangledPair}\n          onChange={e => {\n            localStorage.setItem('entangledPair', e.target.value);\n            setEntangledPair(e.target.value);\n          }}\n        />\n\n        <FormGroup>\n          <Button\n            variant=\"contained\"\n            onClick={async e => await handleSubmit(e)}\n            endIcon={<SendIcon />}\n            disabled={!isEnable(mintA, mintB, entangledPair)}\n          >\n            Swap\n          </Button>\n        </FormGroup>\n      </Box>\n\n      <Box component=\"span\" sx={{ display: 'block', marginTop: '2rem' }}>\n        {!entangledPair ? (\n          ''\n        ) : (\n          <Typography variant=\"h5\" color=\"text.primary\" gutterBottom>\n            Entangled Pair swap complete!\n          </Typography>\n        )}\n        <p>{entangledPair}</p>\n      </Box>\n    </React.Fragment>\n  );\n};\n","import { Box, Button, FormGroup, TextField } from '@mui/material';\nimport React, { useEffect } from 'react';\nimport SearchIcon from '@mui/icons-material/Search';\nimport { useConnection } from '../contexts';\n\nimport { useMemo } from 'react';\nimport { useWallet } from '@solana/wallet-adapter-react';\n\nimport * as anchor from '@project-serum/anchor';\nimport { searchEntanglements } from '../utils/entangler';\nimport Typography from '@mui/material/Typography';\nimport Card from '@mui/material/Card';\nimport CardContent from '@mui/material/CardContent';\n\nexport const Search = () => {\n  const connection = useConnection();\n  console.log(connection);\n  const wallet = useWallet();\n  const [entangledPairs, setEntangledPairs] = React.useState<Array<any>>([]);\n\n  const anchorWallet = useMemo(() => {\n    if (\n      !wallet ||\n      !wallet.publicKey ||\n      !wallet.signAllTransactions ||\n      !wallet.signTransaction\n    ) {\n      return;\n    }\n\n    return {\n      publicKey: wallet.publicKey,\n      signAllTransactions: wallet.signAllTransactions,\n      signTransaction: wallet.signTransaction,\n    } as anchor.Wallet;\n  }, [wallet]);\n\n  useEffect(() => {\n    (async () => {\n      if (!anchorWallet) {\n        return;\n      }\n      setAuthority(anchorWallet.publicKey.toString());\n    })();\n  }, [anchorWallet]);\n\n  const displayEntanglements = (e: any) => {\n    return (\n      <Card\n        sx={{ minWidth: 275, boxShadow: 3, mb: 3 }}\n        key={e.mintA.toString()}\n      >\n        <CardContent>\n          <Typography sx={{ fontSize: 19 }} component=\"div\" gutterBottom>\n            <strong>{e.mintB}</strong>\n          </Typography>\n          {displayEntangledPairContent(e)}\n        </CardContent>\n      </Card>\n    );\n  };\n\n  const displayEntangledPairContent = (e: any) => {\n    return (\n      <Typography\n        variant=\"body2\"\n        color=\"text.secondary\"\n        key={e.mintB.toString()}\n        gutterBottom\n      >\n        <strong>Treasury Mint</strong> : {e.treasuryMint} <br />\n        <strong>Authority</strong> : {e.authority} <br />\n        <strong>Mint A</strong> : {e.mintA} <br />\n        <strong>Mint B</strong> : {e.mintB} <br />\n        <strong>Token A Escrow</strong> : {e.tokenAEscrow} <br />\n        <strong>Token B Escrow</strong> : {e.tokenBEscrow} <br />\n        <strong>Price</strong> : {e.price} <br />\n        <strong>Paid At Least Once</strong> : {e.paid} <br />\n        <strong>Paid Every Time</strong> : {e.paysEveryTime} <br />\n        <strong>Bump</strong> : {e.bump} <br />\n      </Typography>\n    );\n  };\n\n  const handleSubmit = async (event: React.MouseEvent<HTMLElement>) => {\n    event.preventDefault();\n    if (!anchorWallet) {\n      return;\n    }\n    const { entanglements: foundEntanglements } = await searchEntanglements(\n      anchorWallet,\n      connection,\n      mintA,\n      authority,\n    );\n    const entanglements = foundEntanglements.map((entanglement: any) => ({\n      treasuryMint: entanglement.treasuryMint.toBase58(),\n      authority: entanglement.authority.toBase58(),\n      mintA: entanglement.mintA.toBase58(),\n      mintB: entanglement.mintB.toBase58(),\n      tokenAEscrow: entanglement.tokenAEscrow.toBase58(),\n      tokenBEscrow: entanglement.tokenBEscrow.toBase58(),\n      price: entanglement.price.toNumber(),\n      paid: entanglement.paid.toString(),\n      paysEveryTime: entanglement.paysEveryTime.toString(),\n      bump: entanglement.bump,\n    }));\n    setEntangledPairs(entanglements);\n  };\n\n  const [mintA, setMintA] = React.useState(localStorage.getItem('mintA') || '');\n  const [authority, setAuthority] = React.useState(\n    localStorage.getItem('authority') || '',\n  );\n\n  return (\n    <React.Fragment>\n      <Typography variant=\"h4\" color=\"text.primary\" gutterBottom>\n        Search Entanglements\n      </Typography>\n      <p>Search for entanglements by mint address and authority</p>\n\n      <Box\n        component=\"form\"\n        sx={{\n          '& .MuiTextField-root': { m: 1, width: '25ch' },\n        }}\n        noValidate\n        autoComplete=\"off\"\n      >\n        <TextField\n          id=\"mintA-text-field\"\n          label=\"MintA\"\n          value={mintA}\n          onChange={e => {\n            localStorage.setItem('mintA', e.target.value);\n            setMintA(e.target.value);\n          }}\n        />\n        <TextField\n          id=\"mintA-text-field\"\n          label=\"Authority\"\n          value={authority}\n          onChange={e => {\n            localStorage.setItem('authority', e.target.value);\n            setAuthority(e.target.value);\n          }}\n        />\n        <FormGroup>\n          <Button\n            disabled={!authority || !mintA}\n            variant=\"contained\"\n            onClick={async e => await handleSubmit(e)}\n            endIcon={<SearchIcon />}\n          >\n            Search Entanglements\n          </Button>\n        </FormGroup>\n        <Box sx={{ maxWidth: 'md', display: 'block', marginTop: '2rem' }}>\n          <Typography variant=\"h5\" color=\"text.primary\" gutterBottom>\n            Entanglements\n          </Typography>\n        </Box>\n      </Box>\n      <Box sx={{ maxWidth: 'md', display: 'block', marginTop: '2rem' }}>\n        {entangledPairs.map((e: any) => displayEntanglements(e))}\n      </Box>\n    </React.Fragment>\n  );\n};\n","/* eslint-disable no-extra-boolean-cast */\nimport { Box, Button, FormGroup, LinearProgress } from '@mui/material';\nimport React, { useState, useMemo } from 'react';\nimport SearchIcon from '@mui/icons-material/Search';\nimport Alert from '@mui/material/Alert';\nimport AlertTitle from '@mui/material/AlertTitle';\nimport Card from '@mui/material/Card';\nimport CardContent from '@mui/material/CardContent';\nimport Typography from '@mui/material/Typography';\n\nimport { useConnection } from '../contexts';\n\nimport { useWallet } from '@solana/wallet-adapter-react';\n\nimport * as anchor from '@project-serum/anchor';\nimport { getOwnedNFTMints, searchEntanglements } from '../utils/entangler';\nimport { useHistory } from 'react-router-dom';\nimport SwapHorizIcon from '@mui/icons-material/SwapHoriz';\n\nexport const Wizard = () => {\n  const connection = useConnection();\n  const wallet = useWallet();\n  const history = useHistory();\n\n  const [entanglements, setEntanglements] = React.useState<Array<object>>([]);\n  const [myNFTs, setMyNFTs] = React.useState<Array<object>>([]);\n  const [loading, setLoading] = useState(false);\n\n  const authority = process.env.REACT_APP_WHITELISTED_AUTHORITY!;\n\n  const anchorWallet = useMemo(() => {\n    if (\n      !wallet ||\n      !wallet.publicKey ||\n      !wallet.signAllTransactions ||\n      !wallet.signTransaction\n    ) {\n      return;\n    }\n\n    return {\n      publicKey: wallet.publicKey,\n      signAllTransactions: wallet.signAllTransactions,\n      signTransaction: wallet.signTransaction,\n    } as anchor.Wallet;\n  }, [wallet]);\n\n  const handleSubmit = async (event: React.MouseEvent<HTMLElement>) => {\n    event.preventDefault();\n    if (!anchorWallet) {\n      return;\n    }\n    setLoading(true);\n    setEntanglements([]);\n    const res = await getOwnedNFTMints(anchorWallet, connection);\n    const walletNFTMints = res.map(token => token.info.mint);\n    setMyNFTs(walletNFTMints);\n    const allEntanglementsMap: any[] = [];\n    for (let i = 0; i < walletNFTMints.length; i++) {\n      const { entanglements, metadata } = await searchEntanglements(\n        anchorWallet,\n        connection,\n        walletNFTMints[i],\n        authority,\n      );\n      allEntanglementsMap.push({\n        mint: walletNFTMints[i],\n        entanglements,\n        metadata,\n      });\n    }\n    console.log('Entangle', allEntanglementsMap);\n    setEntanglements([...(await allEntanglementsMap)]);\n    setLoading(false);\n  };\n\n  const handleEntanglementClick = async (\n    event: React.MouseEvent<HTMLElement>,\n    entanglement: any,\n  ) => {\n    event.preventDefault();\n    localStorage.setItem('mintA', entanglement.mintA.toString());\n    localStorage.setItem('mintB', entanglement.mintB.toString());\n    localStorage.setItem('entanglement', '');\n    history.push(`swap/`);\n  };\n\n  return (\n    <React.Fragment>\n      <Typography variant=\"h4\" color=\"text.primary\" gutterBottom>\n        Search NFT Entanglements{' '}\n      </Typography>\n\n      <p>Searches entanglements of your NFT </p>\n\n      <Box\n        component=\"form\"\n        sx={{\n          '& .MuiTextField-root': { m: 1, width: '25ch' },\n        }}\n        noValidate\n        autoComplete=\"off\"\n      >\n        <FormGroup>\n          <Button\n            disabled={!anchorWallet || loading || !!!authority}\n            variant=\"contained\"\n            onClick={async e => await handleSubmit(e)}\n            endIcon={<SearchIcon />}\n          >\n            Search Entanglements\n          </Button>\n          {!!!authority && (\n            <Alert severity=\"error\" style={{ marginTop: '1rem' }}>\n              <AlertTitle>Error</AlertTitle>\n              Please set the whitelisted entanglement authority using the\n              environment variable <b>REACT_APP_WHITELISTED_AUTHORITY</b>.\n            </Alert>\n          )}\n        </FormGroup>\n      </Box>\n      <Box sx={{ maxWidth: 'md', display: 'block', marginTop: '2rem' }}>\n        <Typography variant=\"h5\" color=\"text.primary\" gutterBottom>\n          My NFT mints:{' '}\n        </Typography>\n        {loading && <LinearProgress />}\n\n        {\n          //@ts-ignore\n          entanglements.map((e: any) => {\n            return (\n              <Card sx={{ minWidth: 275, boxShadow: 3, mb: 3 }} key={e.mint}>\n                <CardContent>\n                  <Typography\n                    sx={{ fontSize: 19 }}\n                    component=\"div\"\n                    gutterBottom\n                  >\n                    <strong>{e.mint}</strong>\n                  </Typography>\n                  {e.entanglements.length > 0 && (\n                    <React.Fragment>\n                      <Typography sx={{ mb: 1.5 }} color=\"text.secondary\">\n                        Mints\n                      </Typography>\n                      {e.entanglements.map((m: any) => (\n                        <Typography\n                          variant=\"body2\"\n                          color=\"text.secondary\"\n                          key={m.mintA.toString()}\n                          sx={{ marginBottom: '2rem' }}\n                        >\n                          <strong>MintA</strong> : {`${m.mintA.toString()}`}{' '}\n                          <br />\n                          <strong>MintB</strong> : {`${m.mintB.toString()}`}{' '}\n                          <br />\n                          <strong>Price</strong> : {`${m.price.toString()}`}{' '}\n                          <br />\n                          <strong>Pays Every Time</strong> :{' '}\n                          {`${m.paysEveryTime}`} <br />\n                          <div\n                            style={{\n                              display: 'flex',\n                              flexDirection: myNFTs.find(\n                                (d: any) => d === m.mintA.toBase58(),\n                              )\n                                ? 'row'\n                                : 'row-reverse',\n                              justifyContent: 'space-evenly',\n                              alignItems: 'center',\n                            }}\n                          >\n                            <img\n                            alt=\"Mint A Icon\"\n                              style={{ width: '100px', height: '100px' }}\n                              src={\n                                e.metadata.find(d => d.mint.equals(m.mintA))\n                                  .imageUrl\n                              }\n                            />\n                            <p>becomes</p>\n                            <img\n                             alt=\"Mint B Icon\"\n                              style={{ width: '100px', height: '100px' }}\n                              src={\n                                e.metadata.find(d => d.mint.equals(m.mintB))\n                                  .imageUrl\n                              }\n                            />\n                          </div>\n                          <Button\n                            onClick={event => handleEntanglementClick(event, m)}\n                            variant=\"contained\"\n                            startIcon={<SwapHorizIcon />}\n                            sx={{ marginTop: '1rem' }}\n                          >\n                            SWAP\n                          </Button>\n                        </Typography>\n                      ))}\n                    </React.Fragment>\n                  )}\n                </CardContent>\n              </Card>\n            );\n          })\n        }\n      </Box>\n    </React.Fragment>\n  );\n};\n","import React from \"react\";\nimport {\n  BrowserRouter,\n  Link,\n  Route,\n  Switch,\n} from \"react-router-dom\";\n\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\nimport CssBaseline from \"@mui/material/CssBaseline\";\nimport {\n  Box,\n  Stack,\n} from \"@mui/material\";\nimport Typography from '@mui/material/Typography';\n\n// import \"./App.css\";\nimport {\n  useColorMode,\n} from \"./contexts\";\nimport { Header } from \"./components/Header/Header\";\nimport { Show } from \"./components/Show\";\nimport { Create } from \"./components/Create\";\nimport { Swap } from \"./components/Swap\";\nimport { Search } from \"./components/Search\";\nimport { Wizard } from \"./components/Wizard\";\n\n\nconst About = () => {\n  const summary = (\n    <Stack spacing={1}>\n      <div>\n        <Typography variant=\"h4\" color=\"text.primary\" gutterBottom>Token Entangler</Typography>\n      </div>\n\n\n    </Stack>\n  );\n\n  const create = (\n    <Stack spacing={1}>\n      <Link to={`/entanglement/create`}>\n        CREATION\n      </Link>\n\n      <div>\n        Creation builds a new token entanglement between two mints: MintA and MintB. MintB will be removed from the wallet.\n        MintA does not need to be in the wallet or owned.\n      </div>\n\n    </Stack>\n  );\n\n  const show = (\n    <Stack spacing={1}>\n      <Link to={`/entanglement/show`}>\n        SHOW\n      </Link>\n\n      <div>\n        Show the information about a token entanglement stored on chain.\n      </div>\n    </Stack>\n  );\n\n  const swap = (\n    <Stack spacing={1}>\n      <Link to={`/entanglement/swap`}>\n        SWAP\n      </Link>\n\n      <div>\n        Swap NFTs\n      </div>\n\n    </Stack>\n  );\n\n  const search = (\n    <Stack spacing={1}>\n      <Link to={`/entanglement/search`}>\n        SEARCH\n      </Link>\n\n      <div>\n        Search performs a search on the chain for token entanglements of a given mint and given entanglement authority.\n      </div>\n\n    </Stack>\n  );\n\n  const wizard = (\n    <Stack spacing={1}>\n      <Link to={`/entanglement/wizard`}>\n        WIZARD\n      </Link>\n\n      <div>\n        Searches for entanglements from a whitelisted authority of the NFTs owned by the connected wallet.\n        To define the whitelisted authority, the user must define an environment variable named: REACT_APP_WHITELISTED_AUTHORITY!\n      </div>\n\n    </Stack>\n  );\n\n  const steps = [\n    { name: \"summary\", inner: summary },\n    { name: \"create\", inner: create },\n    { name: \"show\", inner: show },\n    { name: \"swap\", inner: swap },\n    { name: \"search\", inner: search },\n    { name: \"wizard\", inner: wizard },\n  ];\n  return (\n    <Stack\n      alignContent=\"left\"\n      textAlign=\"left\"\n      spacing={2}\n    >\n      {steps.map((s, idx) => <div key={idx}>{s.inner}</div>)}\n    </Stack>\n  );\n};\n\nconst getWindowDimensions = () => {\n  const { innerWidth: width, innerHeight: height } = window;\n  return {\n    width,\n    height,\n  };\n};\n\n// eslint-disable-next-line\nconst useWindowDimensions = () => {\n  const [windowDimensions, setWindowDimensions] = React.useState(\n    getWindowDimensions()\n  );\n\n  React.useEffect(() => {\n    const handleResize = () => {\n      setWindowDimensions(getWindowDimensions());\n    }\n\n    window.addEventListener(\"resize\", handleResize);\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []);\n\n  return windowDimensions;\n};\n\nfunction App() {\n  const colorModeCtx = useColorMode();\n\n  React.useEffect(() => { }, [colorModeCtx.mode]);\n\n  const theme = React.useMemo(\n    () => {\n      let mode;\n      if (colorModeCtx.mode === \"dark\" || !colorModeCtx.mode) {\n        mode = \"dark\";\n      } else {\n        mode = \"light\";\n      }\n\n      return createTheme({\n        palette: {\n          mode,\n        },\n      })\n    },\n    [colorModeCtx.mode]\n  );\n\n  const { width } = useWindowDimensions();\n\n  return (\n    <div className=\"App\" style={{ backgroundColor: \"transparent\" }}>\n      <ThemeProvider theme={theme}>\n        <BrowserRouter>\n          <CssBaseline />\n          <Header narrow={width < 670} />\n          <Box\n            maxWidth=\"60ch\"\n            width=\"calc(100% - 60px)\"\n            style={{\n              marginLeft: \"auto\",\n              marginRight: \"auto\",\n            }}\n          >\n            <Box height=\"40px\" />\n            <Switch>\n              <Route path=\"/entanglement/create\" component={Create} />\n              <Route path=\"/entanglement/show\" component={Show} />\n              <Route path=\"/entanglement/swap\" component={Swap} />\n              <Route path=\"/entanglement/search\" component={Search} />\n              <Route path=\"/entanglement/wizard\" component={Wizard} />\n              <Route path=\"/entanglement/\" component={About} />\n            </Switch>\n            <Box height=\"80px\" />\n          </Box>\n        </BrowserRouter>\n      </ThemeProvider>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport {\n  WalletProvider,\n  ConnectionProvider,\n  ColorModeContextProvider,\n} from './contexts';\n\nimport 'antd/dist/antd.css';\nimport '@fontsource/open-sans';\nimport '@fontsource/roboto';\nimport '@fontsource/sora';\n\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n// import \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ConnectionProvider>\n      <WalletProvider>\n        <ColorModeContextProvider>\n          <App />\n        </ColorModeContextProvider>\n      </WalletProvider>\n    </ConnectionProvider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\nreportWebVitals();\n"],"sourceRoot":""}